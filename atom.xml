<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>117blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-24T11:42:28.162Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ChicWu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jvm:垃圾回收器和内存分配回收策略</title>
    <link href="http://yoursite.com/2019/01/22/jvm-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E5%92%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5/"/>
    <id>http://yoursite.com/2019/01/22/jvm-垃圾回收器和内存分配回收策略/</id>
    <published>2019-01-22T06:15:47.000Z</published>
    <updated>2019-01-24T11:42:28.162Z</updated>
    
    <content type="html"><![CDATA[<p>　　最近在项目的压测过程中遇到一些性能上的问题，在对内存资源的监控中发现了第一个问题在项目中存在一个内存泄漏每次GC后总会留有一些内存无法回收,然后老大就开始安排我们兵分两路，一路去排查内存泄漏的原因所在，另外一路去通过对JVM参数的调节，将内存泄漏带来的影响调到最小，顺便提升一下项目的性能，我先是被安排到了第一路，然后在机缘巧合下和老大转战到了第二路进行JVM调优（主要是老大在调参，我是和主要是负责打下手划水和学习）。然后便和老大进行了漫长而又有趣的调优之旅。以下就是在调参过程中所学习到的一个小总结。<br><a id="more"></a></p><h1 id="GC的分析"><a href="#GC的分析" class="headerlink" title="GC的分析"></a>GC的分析</h1><ul><li>那些内存需要GC</li></ul><p>　　我们已经知道java内存当中分为五个区域，其中程序计数器，虚拟机栈，本地方法栈属于线程私有的随着线程的释放而释放。而堆和方法区就不一样，一个接口的多个实现类内存可能不一样，一个方法中的多个分支内存也可能不一样。我们只有在程序处于运行期才能知道创建哪些对象。这部分内存的分配和回收都是动态的，垃圾回收器关注的也是这部分内存。</p><ul><li>什么时候进行GC</li></ul><p>　　详见下文，垃圾判断对象的存活。</p><ul><li>如何进行GC</li></ul><p>　　详见下文，垃圾收集算法，和垃圾收集器。</p><ul><li>了解GC和内存分配的意义</li></ul><p>　　当需要排查各种内存溢出，内存泄漏问题时，当垃圾收集成为系统达到更高并发量或者在高并发下更长时间的稳定运行时的瓶颈是，我们就需要对这些‘自动化’的技术实施必要的监控和调节。</p><p>　　通过调整jvm的运行参数来获取那些“白捡”的性能。</p><h1 id="判断对象的存活"><a href="#判断对象的存活" class="headerlink" title="判断对象的存活"></a>判断对象的存活</h1><h2 id="对象存活的判断策略"><a href="#对象存活的判断策略" class="headerlink" title="对象存活的判断策略"></a>对象存活的判断策略</h2><ul><li>引用计数法</li></ul><p>　　快，方便，实现简单；<br>　　缺点：对象相互引用时，很难判断对象是否改回收。</p><ul><li>可达性分析 </li></ul><p>　　来判定对象是否存活的。这个算法的基本思路就是通过一系列的称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的。</p><h2 id="四种引用"><a href="#四种引用" class="headerlink" title="四种引用"></a>四种引用</h2><p>　　在判断java对象是否存活的时候无论是采用哪种策略，都会用到一个引用的概念，在GC中对象的引用一共包括四种按照从强到弱依次是：强引用，软引用，弱引用，虚引用。　　</p><ul><li>强引用：垃圾收集器永远不会回收被强引用用的对象。</li><li>软引用：在系统将要发生内存溢出异常之前，将会把这些顶下列进回收范围之中进行第二次回收。</li><li>弱引用：被弱引用关联的对象只能生存到下一次垃圾收集发生之前。</li><li>虚引用：一个对象是否有虚引用的存在，完全不会对其生产时间构造影响，将一个对象设置未虚引用关联的唯一目的就是能在对这个对象被收集器回收时收到一个系统通知。　　</li></ul><h1 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h1><ul><li>标记—清除算法</li></ul><p>　　如它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象。之所以说它是最基础的收集算法，是因为<code>后续的收集算法都是基于这种思路并对其缺点进行改进</code>而得到的。<br>它的主要缺点有两个：<br>　　（1）效率问题：标记和清除过程的效率都不高；<br>　　（2）空间问题：标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致，碎片过多会导致大对象无法分配到足够的连续内存，从而不得不提前触发GC，甚至Stop The World</p><ul><li>复制算法<br>　　为解决效率问题，“复制”收集算法出现了。它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。<br>　　 这样使得每次都是对其中的一块进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，<code>实现简单，运行高效</code>。From Survivor, To Survivor使用的就是复制算法。老年代不使用这种算法。<br>　　 它的主要缺点有两个：<br>　　（1）效率问题：在对象存活率较高时，复制操作次数多，效率降低；<br>　　（2）空间问题：內存缩小了一半；需要額外空间做分配担保(老年代)</li><li>标记—整理算法</li></ul><p>　　根据老年代对象存活率高的特点，有人提出了另外一种“标记-整理”（Mark-Compact）算法。该算法在复制算法在对象存活率较高时持续复制导致效率较低的缺点进行改进，在标记-清除算法基础上，不直接清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。这样既可以避免不连续空间出现，还可以避免对象存活率较高时的持续复制。</p><h1 id="具体垃圾收集器"><a href="#具体垃圾收集器" class="headerlink" title="具体垃圾收集器"></a>具体垃圾收集器</h1><h2 id="分代回收机制"><a href="#分代回收机制" class="headerlink" title="分代回收机制"></a>分代回收机制</h2><ul><li>java垃圾回收分代回收<br>　　　　分代回收是现代垃圾回收器的标配，现在的垃圾回收都是基于分代垃圾回收的基础上的。GC分代的基本假设：绝大部分对象的生命周期都非常短暂，存活时间短。<br>　　“分代收集”算法，把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或“标记-整理”算法来进行回收。<h2 id="各类收集器比较"><a href="#各类收集器比较" class="headerlink" title="各类收集器比较"></a>各类收集器比较</h2></li></ul><p><img src="" alt=""></p><ul><li><p>Serial/Serial Old 串行</p></li><li><p>Parallel Scavenge（Paraller GC）/Parallel Old 并行清除</p></li><li><p>ParNew 并行</p></li><li><p>Concurrent Mark Sweep （CMS）并发标记清除</p></li><li><p>G1 并发与并行</p></li><li><p>通过配置选择具体的回收器</p></li></ul><h1 id="内存分配与回收策略"><a href="#内存分配与回收策略" class="headerlink" title="内存分配与回收策略"></a>内存分配与回收策略</h1><h1 id="实战调参"><a href="#实战调参" class="headerlink" title="实战调参"></a>实战调参</h1><ul><li>查看GC当中各区域的内存使用情况</li><li>调节使用不同的回收器组合</li><li>调整不同区域的内存大小</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　最近在项目的压测过程中遇到一些性能上的问题，在对内存资源的监控中发现了第一个问题在项目中存在一个内存泄漏每次GC后总会留有一些内存无法回收,然后老大就开始安排我们兵分两路，一路去排查内存泄漏的原因所在，另外一路去通过对JVM参数的调节，将内存泄漏带来的影响调到最小，顺便提升一下项目的性能，我先是被安排到了第一路，然后在机缘巧合下和老大转战到了第二路进行JVM调优（主要是老大在调参，我是和主要是负责打下手划水和学习）。然后便和老大进行了漫长而又有趣的调优之旅。以下就是在调参过程中所学习到的一个小总结。&lt;br&gt;
    
    </summary>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（二）工厂设计模式</title>
    <link href="http://yoursite.com/2019/01/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%EF%BC%8C%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/01/11/设计模式二，工厂设计模式/</id>
    <published>2019-01-11T07:40:17.000Z</published>
    <updated>2019-01-15T13:17:42.591Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p><p>工厂设计模式有三类</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（一）设计原则</title>
    <link href="http://yoursite.com/2019/01/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80%EF%BC%8C%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/01/11/设计模式一，设计原则/</id>
    <published>2019-01-11T02:03:46.000Z</published>
    <updated>2019-01-11T09:21:35.621Z</updated>
    
    <content type="html"><![CDATA[<p>　　最近在学习当中遇到了一些问题想要针对这些问题看看源码以一探究竟，然后发现源码当中竟也有些门道，但是又道不出是什么门道，这时忽然想到了好久未曾拿起的《设计模式之禅》，一番研究过后，果然是用了设计模式。索性一不做二不休，把设计模式也顺便拿起来研究一下。<br><a id="more"></a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>　　设计模式中一共有六个设计总原则，作为设计模式当中比较偏理论的部分，一开始读起来肯定会感觉比较生涩，没有什么感觉。读的时候可能一看就理解，但是一转眼就会忘记，没有什么感触，所以我的建议是先从从设计模式当中挑一下相对简单的，常见容易理解的模式中进行实际的上手操作。让在对设计模式有了一些概念后再反观这些理论，回有一些比较深刻的印象。学习就应该先实践上手，然后再用理论去补充完善实践。</p><p>　　设计模式一共有六个设计原则分别为：开闭原则，单一责任模式，接口隔离原则，里氏替换原则，依赖倒置原则，迪米特法则（最少知道原则）。这六个原则并不是完全独立的，其总原则是开闭原则。单一责任原则与接口隔离原则有跟多的类似之处，主要是强调减少类与接口的臃肿方便后期的维护，氏替换原则为依赖倒置原则提供了基础，一个是为继承使用提供一个良好的使用规范。另外一个则是强调解耦合(当然是在里氏替换原则的基础上)，最后一个是迪米特法则主要在与强调提高类的内聚。</p><h1 id="单一责任原则"><a href="#单一责任原则" class="headerlink" title="单一责任原则"></a>单一责任原则</h1><h2 id="定义-amp-理解"><a href="#定义-amp-理解" class="headerlink" title="定义&amp;理解"></a>定义&amp;理解</h2><p>　　单一责任原则的定义为：There should never be more than one reason for a class to change 意思就是“导致一个类变化的原因永远不要多于一个”如若不然，就应该把类拆分。</p><p>　　这个原则并不像其他的原则有则相对比较容易区分的界限。是最容易实现也是最难实现的一个原则，更多的时候是来依靠个人的经验去划分(在具体的操作过程中常常因为这个原则陷于纠结当中，很多时候一个完整的流程按照不同的方向可以又多种划分方法)。</p><h1 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>　　对于接口的隔离有两种定义： </p><ul><li><p>Clients should not be forced to depend upon interfaces that they don’t use.（客户端不应该依<br>赖它不需要的接口。）</p></li><li><p>The dependency of one class to another one should depend on the smallest possible interface.<br>（类间的依赖关系应该建立在最小的接口上。）</p></li></ul><h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><ul><li>接口要尽量小</li><li>接口要高内聚</li><li>定制服务</li><li>接口设计是有限度的</li></ul><h1 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>　　里氏替换原则的定义为：Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.（所有引用基类的地方必须能透明地使用其子类的对象）。通俗一点的意思就是父类能出现的地方子类一定能够出现，并且当用子类替换父类后不会有什么错误和影响。翻过来则不一定可以成立。</p><h2 id="含义-1"><a href="#含义-1" class="headerlink" title="含义"></a>含义</h2><p>　　里氏替换原则为良好的继承提供了规范和基础，这句定义可以分成4成含义：</p><ul><li><p>子类必须完全实现父类的方法。</p><p>　　老鼠生来会打洞，这是定义当中最为字面的含义也是必须要求要实现的一条规范。</p></li><li><p>子类可以有自己的个性</p><p>　　龙生九子个有不同，可以在父类现有方法的基础上添加一些子类特有的方法。</p></li><li><p>覆盖或者实现父类的方法时输入的参数不能被缩小</p><p>　　即：之类方法中的传参不可以是父类方法传参的子类。</p></li><li><p>覆盖或者实现父类的方法时输出的结果不能被放大</p><p>　　即：之类方法中的返回值不可以是父类方法返回值的父类。</p></li></ul><h1 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h1><h2 id="定义-amp-含义"><a href="#定义-amp-含义" class="headerlink" title="定义&amp;含义"></a>定义&amp;含义</h2><p>　　依赖倒置原则的原始定义是：”High level modules should not depend upon low level modules.Both should depend upon abstractions.Abstractions should not depend upon details.Details should depend upon abstractions“.翻译过来就是“高级模块不应该依赖于低级模块。两者都应该依赖于抽象。抽象不应该依赖于细节。细节应该取决于抽象“。<br>　　<br>　　依赖倒置原则在Java语言中的表现就是以下三个含义，换而言之简洁一点就是面向接口编程而非面向对象。</p><ul><li>模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的；</li><li>接口或抽象类不依赖于实现类；</li><li>实现类依赖接口或抽象类。 </li></ul><h2 id="依赖的三种写法"><a href="#依赖的三种写法" class="headerlink" title="依赖的三种写法"></a>依赖的三种写法</h2><ul><li>构造函数传递依赖对象</li><li>Sertter方法传递依赖对象</li><li>接口声明依赖对象</li></ul><h1 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h1><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><p>　　迪米特法则也称为最少知道原则，虽然名字不同，但描述的是同一个规则：一个对象应该对其他对象有最少的了解。通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少</p><p>　　最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。</p><h2 id="含义-2"><a href="#含义-2" class="headerlink" title="含义"></a>含义</h2><p>　　迪米特法则对类的低耦合提出了明确的要求，其包含以下4层含义。</p><ul><li>只和朋友交流</li><li>朋友间也是有距离的</li><li>是自己的就是自己的</li><li>谨慎使用Serializable</li></ul><h1 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h1><h2 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h2><p>　　开闭原则是Java世界里最基础的设计原则，是设计模式当中的总原则。它指导我们如何建立一个稳定的、灵活的系统，先来看开闭原则的定义：Software entities like classes,modules and functions should be open for extension but closed for modifications.（一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。）</p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　最近在学习当中遇到了一些问题想要针对这些问题看看源码以一探究竟，然后发现源码当中竟也有些门道，但是又道不出是什么门道，这时忽然想到了好久未曾拿起的《设计模式之禅》，一番研究过后，果然是用了设计模式。索性一不做二不休，把设计模式也顺便拿起来研究一下。&lt;br&gt;
    
    </summary>
    
    
      <category term="设计模式　" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Centos7常用配置</title>
    <link href="http://yoursite.com/2019/01/08/Centos7%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/01/08/Centos7常用配置/</id>
    <published>2019-01-08T06:41:07.000Z</published>
    <updated>2019-01-09T01:35:57.408Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p><h1 id="应用加密"><a href="#应用加密" class="headerlink" title="应用加密"></a>应用加密</h1><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><h2 id="Weblogic"><a href="#Weblogic" class="headerlink" title="Weblogic"></a>Weblogic</h2><h1 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
      <category term="备忘录" scheme="http://yoursite.com/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Centos常用服务安装</title>
    <link href="http://yoursite.com/2019/01/08/Centos%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/01/08/Centos常用服务安装/</id>
    <published>2019-01-08T06:40:46.000Z</published>
    <updated>2019-01-08T13:14:23.837Z</updated>
    
    <content type="html"><![CDATA[<p>　　Linux环境下常用的一些软件的安装教程以及启动和访问方法（持续更新）<br><a id="more"></a></p><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><p>1，下载nginx (版本随意，本人用的是 nginx-1.10.1)</p><p>　　下载地址：<code>http://nginx.org/en/download.html</code></p><p>2，对压缩包进行解压。</p><p>　　命令: <code>tar nginx-1.10.1.tar.gz</code>    </p><p>3，安装依赖</p><p>　　命令:<code>yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</code></p><p>4，进入解压后的目录，执行<code>./configure</code>，在执行成功后回出现一些nginx安装相关的信息</p><p><img src="/img/nginx2.png" alt="nginx安装相关新在"></p><p>5，成功后在解压后的目录中进行编译和安装 <code>make &amp;&amp; make install</code></p><p>6，这时会发现在/usr/local目录下生生成了nginx目录</p><p>7，启动nginx</p><p>　　进入nginx启动目录<code>cd /usr/local/nginx/sbin</code></p><p>　　执行启动命令 <code>./nginx</code></p><p>8，关闭nginx</p><p>　　命令<code>./nginx -sstop</code></p><p>9，访问测试，浏览器输入<code>http://ip</code></p><h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">#运行用户</span><br><span class="line">user nobody;</span><br><span class="line">#启动进程,通常设置成和cpu的数量相等</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#全局错误日志及PID文件</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#工作模式及连接数上限</span><br><span class="line">events &#123;</span><br><span class="line">    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,</span><br><span class="line">    #仅用于linux2.6以上内核,可以大大提高nginx的性能</span><br><span class="line">    use   epoll; </span><br><span class="line"></span><br><span class="line">    #单个后台worker process进程的最大并发链接数    </span><br><span class="line">    worker_connections  1024;</span><br><span class="line"></span><br><span class="line">    # 并发总数是 worker_processes 和 worker_connections 的乘积</span><br><span class="line">    # 即 max_clients = worker_processes * worker_connections</span><br><span class="line">    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么</span><br><span class="line">    # 为什么上面反向代理要除以4，应该说是一个经验值</span><br><span class="line">    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000</span><br><span class="line">    # worker_connections 值的设置跟物理内存大小有关</span><br><span class="line">    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数</span><br><span class="line">    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右</span><br><span class="line">    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：</span><br><span class="line">    # $ cat /proc/sys/fs/file-max</span><br><span class="line">    # 输出 34336</span><br><span class="line">    # 32000 &lt; 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内</span><br><span class="line">    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置</span><br><span class="line">    # 使得并发总数小于操作系统可以打开的最大文件数目</span><br><span class="line">    # 其实质也就是根据主机的物理CPU和内存进行配置</span><br><span class="line">    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。</span><br><span class="line">    # ulimit -SHn 65535</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    #设定mime类型,类型由mime.type文件定义</span><br><span class="line">    include    mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #设定日志格式</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，</span><br><span class="line">    #对于普通应用，必须设为 on,</span><br><span class="line">    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，</span><br><span class="line">    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span><br><span class="line">    sendfile     on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #连接超时时间</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    tcp_nodelay     on;</span><br><span class="line"></span><br><span class="line">    #开启gzip压缩</span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_disable &quot;MSIE [1-6].&quot;;</span><br><span class="line"></span><br><span class="line">    #设定请求缓冲</span><br><span class="line">    client_header_buffer_size    128k;</span><br><span class="line">    large_client_header_buffers  4 128k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #设定虚拟主机配置</span><br><span class="line">    server &#123;</span><br><span class="line">        #侦听80端口</span><br><span class="line">        listen    80;</span><br><span class="line">        #定义使用 www.nginx.cn访问</span><br><span class="line">        server_name  www.nginx.cn;</span><br><span class="line"></span><br><span class="line">        #定义服务器的默认网站根目录位置</span><br><span class="line">        root html;</span><br><span class="line"></span><br><span class="line">        #设定本虚拟主机的访问日志</span><br><span class="line">        access_log  logs/nginx.access.log  main;</span><br><span class="line"></span><br><span class="line">        #默认请求</span><br><span class="line">        location / &#123;</span><br><span class="line">            </span><br><span class="line">            #定义首页索引文件的名称</span><br><span class="line">            index index.php index.html index.htm;   </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 定义错误提示页面</span><br><span class="line">        error_page   500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #静态文件，nginx自己处理</span><br><span class="line">        location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</span><br><span class="line">            </span><br><span class="line">            #过期30天，静态文件不怎么更新，过期可以设大一点，</span><br><span class="line">            #如果频繁更新，则可以设置得小一点。</span><br><span class="line">            expires 30d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #禁止访问 .htxxx 文件</span><br><span class="line">            location ~ /.ht &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><h2 id="安装教程-1"><a href="#安装教程-1" class="headerlink" title="安装教程"></a>安装教程</h2><h1 id="rabbitMQ"><a href="#rabbitMQ" class="headerlink" title="rabbitMQ"></a>rabbitMQ</h1><h2 id="安装使用教程"><a href="#安装使用教程" class="headerlink" title="安装使用教程"></a>安装使用教程</h2><p>1，下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.6/rabbitmq-server-3.6.6-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><p>2，安装</p><p>　　<code>yum install rabbitmq-server-3.6.6-1.el7.noarch.rpm</code></p><p>3，一些基本操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chkconfig rabbitmq-server on  # 添加开机启动RabbitMQ服务</span><br><span class="line">$ sudo /sbin/service rabbitmq-server start # 启动服务</span><br><span class="line">$ sudo /sbin/service rabbitmq-server status  # 查看服务状态</span><br><span class="line">$ sudo /sbin/service rabbitmq-server stop   # 停止服务</span><br><span class="line"> </span><br><span class="line"># 查看当前所有用户</span><br><span class="line">$ sudo rabbitmqctl list_users</span><br><span class="line"> </span><br><span class="line"># 查看默认guest用户的权限</span><br><span class="line">$ sudo rabbitmqctl list_user_permissions guest</span><br><span class="line"> </span><br><span class="line"># 由于RabbitMQ默认的账号用户名和密码都是guest。为了安全起见, 先删掉默认用户</span><br><span class="line">$ sudo rabbitmqctl delete_user guest</span><br><span class="line"> </span><br><span class="line"># 添加新用户</span><br><span class="line">$ sudo rabbitmqctl add_user username password</span><br><span class="line"> </span><br><span class="line"># 设置用户tag</span><br><span class="line">$ sudo rabbitmqctl set_user_tags username administrator</span><br><span class="line"> </span><br><span class="line"># 赋予用户默认vhost的全部操作权限</span><br><span class="line">$ sudo rabbitmqctl set_permissions -p / username &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line"> </span><br><span class="line"># 查看用户的权限</span><br><span class="line">$ sudo rabbitmqctl list_user_permissions username</span><br></pre></td></tr></table></figure><p>4，开启web管理接口</p><p>　　如果只从命令行操作RabbitMQ，多少有点不方便。幸好RabbitMQ自带了web管理界面，只需要启动插件便可以使用。</p><p>　　<code>$ sudo rabbitmq-plugins enable rabbitmq_management</code></p><p>　　然后通过浏览器访问<code>http://ip:15672</code>输入用户名和密码访问web管理界面了。</p><p>5，开启用户远程访问</p><p>　　默认情况下，RabbitMQ的默认的<code>guest</code>用户只允许本机访问， 如果想让<code>guest</code>用户能够远程访问的话，只需要将配置文件中的<code>loopback_users</code>列表置为空即可，如下：</p><p>　　<code>{loopback_users, []}</code></p><p>　　另外关于新添加的用户，直接就可以从远程访问的，如果想让新添加的用户只能本地访问，可以将用户名添加到上面的列表, 如只允许<code>admin</code>用户本机访问。</p><p>　　<code>{loopback_users, [&quot;admin&quot;]}</code></p><p>　　更新配置后，别忘了重启服务</p><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p>　　试着在腾讯云服务器上部署web应用，就想着先搭建一下服务器环境，操作系统选的是centos7，在安装好jdk，tomcat后测试可以部署web应用就准备再安装一个mysql数据库，之前试过好几种方式都是以初始密码找不到告终，这次就又重新百度安装方式。</p><p>　　据说centos7没有mysql 的yum源，于是就直接从网上下载mysql的repo源（这个玩意目前还没仔细探究是什么东西，在centos里面应该会涉及到），使用</p><p>　　<code>wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</code></p><p>　　从网上下载这个rpm包（这里wget 命令是从网络上下载文件的命令一般的格式为wget +url），下载好rpm包后安装这个包</p><p>　　<code>rpm -ivh mysql-community-release-el7-5.noarch.rpm</code><br>　　安装好这个rpm包后，开始安装mysql-server </p><p>　　<code>sudo yum install mysql-server</code><br>　　之后就是网络下载安装了，在中间会出现两个需要选择的地方都填“y”回车就行，然后就会显示安装成功</p><p>　　然后我们来测试是否安装成功，这时如果直接像windows下一样输入mysql -uroot -p可能会出现一些错误（ERROR 2002 (HY000): Can‘t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock‘ (2)）原因是mysql这个文件的权限问题，需要把这个文件的权限改为当前用户</p><p>　　 <code>sudo chown -R openscanner:openscanner /var/lib/mysql</code><br>　　然后就重启服务重新直接登录root用户　<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　　service mysqld restart</span><br><span class="line">　　mysql -u root</span><br></pre></td></tr></table></figure></p><p>　　这样就会进入到mysql服务，也就是我们常用的mysql命令行，这时就要来修改root用户的密码了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　use mysql;</span><br><span class="line">　　update user set password=password(&apos;new password&apos;) where user=&apos;root&apos;;</span><br><span class="line">　　flush privileges;</span><br></pre></td></tr></table></figure></p><p>　　这里的第一句是选用需要修改的数据库，在mysql中用户名密码都在数据库名为mysql的这个库中，在修改数据库中的数据表前都需要使用use命令选中使用哪个数据库，第二句是更新数据表user中root用户的密码为新密码，第三句是将前面所做的修改在系统中刷新生效。</p><p>　　然后就可以使用exit命令退出然后重新使用mysql -uroot -p 回车然后输入新密码进入mysql了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　Linux环境下常用的一些软件的安装教程以及启动和访问方法（持续更新）&lt;br&gt;
    
    </summary>
    
    
      <category term="备忘录" scheme="http://yoursite.com/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Jsoup</title>
    <link href="http://yoursite.com/2019/01/03/jsoup/"/>
    <id>http://yoursite.com/2019/01/03/jsoup/</id>
    <published>2019-01-03T05:49:03.402Z</published>
    <updated>2018-09-13T06:07:14.466Z</updated>
    
    <content type="html"><![CDATA[<p>　　对HTML页面的解析，之前我一般使用HTMLParser，详细见HTMLParser的学习系列 - 学习总结，但是这个项目已经停止更新。现在比较好的解析HTML的控件是Jsoup。本文对Jsoup的用法做个总结.<br><a id="more"></a></p><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h4><p>　　Jsoup的主要功能有三部分组成：<br>　　<code>a) 从字符串，网页，本地文件等方式生成Documentn</code><br>　　<code>b) 在生成Doucment后，根据Dom和css或类似jquery的selector语法获取Element，然后再从Elements中获取节点属性、文本、html</code><br>　　<code>c) 对Element的进行操作，包括HTML的值、节点内容的值和设置节点属性的值下方每节对以上三点进行逐一演示。</code></p><h6 id="POM-xml-配置"><a href="#POM-xml-配置" class="headerlink" title="POM.xml 配置"></a>POM.xml 配置</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.jsoup&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jsoup&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.10.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="2-生成Document"><a href="#2-生成Document" class="headerlink" title="2.生成Document"></a>2.生成Document</h4><p>　　JSOUP通过不同方式生成Document，主要有以下三种：<br>　　<code>a) 字符串</code><br>　　<code>b) 网页</code><br>　　<code>c) 本地文件</code></p><h6 id="2-1-从字符串生成Document"><a href="#2-1-从字符串生成Document" class="headerlink" title="2.1 从字符串生成Document"></a>2.1 从字符串生成Document</h6><p>　　关键方法： Jsoup.parse(String html)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void fromString() &#123;</span><br><span class="line">       String html = &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;First parse&lt;/title&gt;&lt;/head&gt;&quot;</span><br><span class="line">               + &quot;&lt;body&gt;&lt;p&gt;Parsed HTML into a doc.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;;</span><br><span class="line">       Document document = Jsoup.parse(html);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h6 id="2-2-从网页生成Document"><a href="#2-2-从网页生成Document" class="headerlink" title="2.2 从网页生成Document"></a>2.2 从网页生成Document</h6><p>　　关键方法： Jsoup.connect()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void fromURL() &#123;</span><br><span class="line">    Document document;</span><br><span class="line">    try &#123;</span><br><span class="line">    //通过URL+访问的方法获取Document</span><br><span class="line">        document = Jsoup.connect(&quot;https://www.baidu.com/&quot;).get();</span><br><span class="line">        // 从document中获取title值</span><br><span class="line">        String title = document.title();</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="2-3-从本地文件生成Document"><a href="#2-3-从本地文件生成Document" class="headerlink" title="2.3 从本地文件生成Document"></a>2.3 从本地文件生成Document</h6><p>　　关键方法： Jsoup.connect(File file,String charset)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void fromFile()&#123;</span><br><span class="line">        File file = new File(&quot;filePath&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            //通过文件+编码集来获取Document</span><br><span class="line">            Document document = Jsoup.parse(file,&quot;utf-8&quot;);</span><br><span class="line">            System.out.println(document.title());</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-获取Element及节点属性、文本、html"><a href="#3-获取Element及节点属性、文本、html" class="headerlink" title="3. 获取Element及节点属性、文本、html"></a>3. 获取Element及节点属性、文本、html</h4><p>　　在上一节中已经生成Document，下面就可以对这个document进行操作，操作的主要单位是Element，下面介绍如何选取elment及获取elment的内容。</p><h6 id="3-1-获取Element，获取的方式分为二种"><a href="#3-1-获取Element，获取的方式分为二种" class="headerlink" title="3.1 获取Element，获取的方式分为二种:"></a>3.1 获取Element，获取的方式分为二种:</h6><p>　　<code>a) 通过DOM解析来获取;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void extractDataByDOM() throws IOException&#123;</span><br><span class="line">    Document doc = Jsoup.connect(&quot;https://www.baidu.com/&quot;).get();</span><br><span class="line">    Element lg = doc.getElementById(&quot;lg&quot;);</span><br><span class="line">    logger.info(&quot;getElementById lg = &#123;&#125;&quot;, lg);</span><br><span class="line">    Elements links = doc.getElementsByTag(&quot;a&quot;);</span><br><span class="line">    for (Element link : links) &#123;</span><br><span class="line">      String linkHref = link.attr(&quot;href&quot;);</span><br><span class="line">      String linkText = link.text();</span><br><span class="line">      logger.info(&quot;linkHref=&#123;&#125;, linkText=&#123;&#125;&quot;,linkHref, linkText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　<code>b) 通过css或类似jquery的selector语法来获取；</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public void select4J() throws IOException&#123;</span><br><span class="line">    File input = new File(&quot;filePath&quot;);</span><br><span class="line">    Document document = Jsoup.parse(input, &quot;UTF-8&quot;, &quot;http://example.com/&quot;);</span><br><span class="line"></span><br><span class="line">    // 获取所有的a节点</span><br><span class="line">    Elements links = document.select(&quot;a[href]&quot;);</span><br><span class="line">    System.out.println(links);</span><br><span class="line">    // 获取img的src以.png结果结尾</span><br><span class="line">    Elements pngs = document.select(&quot;img[src$=.png]&quot;);</span><br><span class="line">    System.out.println(pngs);</span><br><span class="line">    // 获取class=masthead的div节点</span><br><span class="line">    Element masthead = document.select(&quot;div.masthead&quot;).first();</span><br><span class="line">    System.out.println(masthead);</span><br><span class="line"></span><br><span class="line">    // 获取class=r的h3节点下面的a节点</span><br><span class="line">    Elements resultLinks = document.select(&quot;h3.r &gt; a&quot;);</span><br><span class="line">    System.out.println(resultLinks);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="3-2-获取节点属性、文本、html"><a href="#3-2-获取节点属性、文本、html" class="headerlink" title="3.2 获取节点属性、文本、html"></a>3.2 获取节点属性、文本、html</h6><h6 id="3-3-Select选择器"><a href="#3-3-Select选择器" class="headerlink" title="3.3 Select选择器"></a>3.3 Select选择器</h6><h4 id="4-设置节点值"><a href="#4-设置节点值" class="headerlink" title="4. 设置节点值"></a>4. 设置节点值</h4><p>　　设置节点值，主要有在以下方式：<br>　　<code>a) 设置节点HTML的值</code><br>　　<code>b) 设置节点内容的值</code><br>　　<code>c) 设置节点属性的值</code></p><h6 id="4-1-设置节点HTML的值"><a href="#4-1-设置节点HTML的值" class="headerlink" title="4.1 设置节点HTML的值"></a>4.1 设置节点HTML的值</h6><p>　　1. Element.html：使用新的HTML替换旧的值<br>　　2. Element.prepend：将新html添加到指定节点内部的最前面<br>　　3. Element.append：将新html添加到指定节点内部的最后面<br>　　4. Element.wrap:将指定节点封装到html最里面</p><h6 id="4-2-设置节点内容的值"><a href="#4-2-设置节点内容的值" class="headerlink" title="4.2 设置节点内容的值"></a>4.2 设置节点内容的值</h6><p>　　1. Element.text: 完全替换内容<br>　　2. Element.prepend:在节点的内容最前面加内容<br>　　3. Element.append：在节点的内容最后面加内容</p><h6 id="4-3-设置节点属性的值"><a href="#4-3-设置节点属性的值" class="headerlink" title="4.3 设置节点属性的值"></a>4.3 设置节点属性的值</h6><p>　　1. element.attr: 设置属性<br>　　2. element.addClass: 设置class</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　对HTML页面的解析，之前我一般使用HTMLParser，详细见HTMLParser的学习系列 - 学习总结，但是这个项目已经停止更新。现在比较好的解析HTML的控件是Jsoup。本文对Jsoup的用法做个总结.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>随笔记</title>
    <link href="http://yoursite.com/2018/09/25/%E9%9A%8F%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/09/25/随笔记/</id>
    <published>2018-09-25T01:16:19.000Z</published>
    <updated>2018-09-25T01:19:18.971Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔记" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>责任链设计模式</title>
    <link href="http://yoursite.com/2018/09/12/%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/09/12/责任链设计模式/</id>
    <published>2018-09-12T11:18:45.000Z</published>
    <updated>2018-09-13T01:25:17.890Z</updated>
    
    <content type="html"><![CDATA[<p>　　责任链设计模式属于行为类设计模式，责任链设计模式顾名思义就好比链表一样，不同的是责任链是由多个处理不同任务的对象节点组成，每个对象节点包含着责任链上下一个对象节点的引用，这样请求就可以在这条链上进行传递，直到有一个对象节点可以处理请求，或者每个对象节点都可以处理请求，并传递给下家，直到链上的每个对象节点都处理完，这样就能在不影响客户端的前提下在责任链上任意的更改处理对象节点。<br><a id="more"></a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>　　例如我们去政府部门去办事，有时候就会遇见官员责任踢球，这就是一个责任链，你的问题我能够解决我就解决，如果我不能解决就推卸给另一个部门，至于谁最后处理这个事情，政府部门为了将屁民的请求也官员耦合在一起，让多个（部门）都可以接受请求，将这些（部门）对象连接成一条链，并且沿着这条链传递请求，直到有（部门）对象处理它为止。</p><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><ul><li>降低客户段与处理节点的耦合度</li><li>简化处理节点的相互连接</li><li>增强了给处理节点指派职责的灵活性</li><li>简化了如何增加一个处理节点</li><li><code>缺点</code>：不能保证请求一定被接收；且对于比较长的职责链，请求的处理可能涉及到多个处理对象，系统性能将受到一定影响，而且在进行代码调试时不太方便；另外如果使用不恰当容易产生循环调用。</li></ul><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p><img src="/img/责任链设计模式1.jpg" alt="结构"><br>　　一个典型的对象结构可能如下图所示：<br><img src="/img/责任链设计模式2.jpg" alt="结构"><br>　　主要有以下三个对象组成：</p><ul><li>Handler(抽象处理者)：定义一个处理请求的接口，和一个后继连接(可选)</li><li>ConcreteHandler(具体处理者)：处理它所负责的请求，可以访问后继者，如果可以处理请求则处理，否则将该请求转给他的后继者。</li><li>Client(客户类)：向一个链上的具体处理者ConcreteHandler对象提交请求。</li></ul><h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><p>　　责任链按照处理对象处理的方法可以分为两种模式：<br>　　a) 纯的责任链模式：一个具体处理者角色处理只能对请求作出两种行为中的一个：一个是自己处理（承担责任）；另一个是把责任推给下家。<code>不允许出现某一个具体处理者对象在承担了一部分责任后又将责任向下传</code>的情况。请求在责任链中必须被处理，<code>不能出现无果而终的结局</code>。<br>　　b) 不纯的责任链模式：在一个纯的职责链模式里面，一个请求必须被某一个处理者对象所接收；在一个不纯的职责链模式里面，一个请求可以最终不被任何接收端对象所接收。</p><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>　　a) 不纯的责任链模式：<br>　　Servlet中的过滤器就采用了不纯的责任链模式，FIlter中的FilterChan对象保存了最终到Servlet对象的所有FIlter对象，这些对象存储在ApplicationFIlterChan对象的Fil数组中，在FilterChain链上没执行一个Filter对象，数组的当前计数就会增加1，直到计数等于数组的长度为止，当FilterChain上的所有Filte执行完毕后就会执行Servlet，所以ApplicationFilterChain中会持有Servlet对象的引用。<br>　　b) 纯的责任链设计模式：</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　责任链设计模式属于行为类设计模式，责任链设计模式顾名思义就好比链表一样，不同的是责任链是由多个处理不同任务的对象节点组成，每个对象节点包含着责任链上下一个对象节点的引用，这样请求就可以在这条链上进行传递，直到有一个对象节点可以处理请求，或者每个对象节点都可以处理请求，并传递给下家，直到链上的每个对象节点都处理完，这样就能在不影响客户端的前提下在责任链上任意的更改处理对象节点。&lt;br&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>InnerClass</title>
    <link href="http://yoursite.com/2018/09/12/%E9%9C%87%E6%83%8A%EF%BC%81%E5%A4%96%E9%83%A8%E7%B1%BB%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E5%86%85%E9%83%A8%E7%B1%BBprivate%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2018/09/12/震惊！外部类可以访问内部类private变量/</id>
    <published>2018-09-12T06:08:55.000Z</published>
    <updated>2018-09-13T06:44:13.493Z</updated>
    
    <content type="html"><![CDATA[<p>　　<code>震惊！外部类竟可以访问内部类private变量！！！</code><br><a id="more"></a><br>　　标题致敬著名的某头条，在最近的开发过程中写了一段类似与这样的代码，惊奇的发现外部类竟然能对内部类做这样的事情！！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class OuterClass &#123;</span><br><span class="line">    private String outerStr;</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        new InnerClass().innerStr = &quot;外部类也可以修改内部类私有变量&quot; ;</span><br><span class="line">    &#125;</span><br><span class="line">    public class InnerClass&#123;</span><br><span class="line">        private String innerStr;</span><br><span class="line">        public void test1()&#123;</span><br><span class="line">            outerStr = &quot;内部类可以直接修改外部类私有变量&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　以我的暴脾气，既然遇见了一个问题就要刨根问底然后我有写了如下的测试，分别测试了成员内部类和方法内部类的私有变量以及私有方法的，并且还特地的将成员内部类与方法内部类写成了一样的。发现并不会出现类冲突，但是在方法内方法内部类会覆盖掉成员内部类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class OuterClass &#123;</span><br><span class="line">    private String outerStr = &quot;外部类的私有变量&quot;;</span><br><span class="line">    //成员内部类</span><br><span class="line">    private class InnerClass&#123;</span><br><span class="line">        private InnerClass()&#123;</span><br><span class="line">            System.out.println(&quot;外部类可以调用成员内部类的私有构造方法&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        private String innerStr = &quot;成员内部类的私有变量&quot;;</span><br><span class="line">        private void test()&#123;</span><br><span class="line">            System.out.println(&quot;成员内部类可以直接调用&quot;+outerStr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        System.out.println(&quot;外部类可以通过实例对象调用&quot;+new InnerClass().innerStr);</span><br><span class="line">        new InnerClass().test();</span><br><span class="line">        //方法内部类</span><br><span class="line">        class InnerClass&#123;</span><br><span class="line">            private InnerClass()&#123;</span><br><span class="line">                System.out.println(&quot;外部类可以调用方法内部类的私有构造方法&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            private String innerStr = &quot;方法内部类的私有变量&quot;;</span><br><span class="line">            private void test()&#123;</span><br><span class="line">                System.out.println(&quot;方法内部类可以直接调用&quot;+outerStr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //注意要有先后顺序</span><br><span class="line">        System.out.println(&quot;外部类可以通过实例对象调用&quot;+new InnerClass().innerStr);</span><br><span class="line">        new InnerClass().test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　<code>运行结果：</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">外部类可以调用成员内部类的私有构造方法</span><br><span class="line">外部类可以通过实例对象调用成员内部类的私有变量</span><br><span class="line">外部类可以调用成员内部类的私有构造方法</span><br><span class="line">成员内部类可以直接调用外部类的私有变量</span><br><span class="line">外部类可以调用方法内部类的私有构造方法</span><br><span class="line">外部类可以通过实例对象调用方法内部类的私有变量</span><br><span class="line">外部类可以调用方法内部类的私有构造方法</span><br><span class="line">方法内部类可以直接调用外部类的私有变量</span><br></pre></td></tr></table></figure></p><p>　　言归正传，下面正式开始全面解析内部类。</p><h1 id="为什么使用内部类"><a href="#为什么使用内部类" class="headerlink" title="为什么使用内部类"></a>为什么使用内部类</h1><h1 id="内部类与外部类的联系"><a href="#内部类与外部类的联系" class="headerlink" title="内部类与外部类的联系"></a>内部类与外部类的联系</h1><h2 id="内部类访问外部类"><a href="#内部类访问外部类" class="headerlink" title="内部类访问外部类"></a>内部类访问外部类</h2><h2 id="外部类访问内部类"><a href="#外部类访问内部类" class="headerlink" title="外部类访问内部类"></a>外部类访问内部类</h2><h1 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h1><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><h2 id="方法内部类"><a href="#方法内部类" class="headerlink" title="方法内部类"></a>方法内部类</h2><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;code&gt;震惊！外部类竟可以访问内部类private变量！！！&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Babel过滤URL</title>
    <link href="http://yoursite.com/2018/09/11/babel%E8%BF%87%E6%BB%A4URL/"/>
    <id>http://yoursite.com/2018/09/11/babel过滤URL/</id>
    <published>2018-09-11T08:30:18.000Z</published>
    <updated>2018-09-13T02:55:01.852Z</updated>
    
    <content type="html"><![CDATA[<p>　　通过nodejs+babel查找所有js文件中的URL<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">const babylon = require(&apos;babylon&apos;);</span><br><span class="line">const Traverse = require(&apos;babel-traverse&apos;).default;</span><br><span class="line">const generator = require(&apos;babel-generator&apos;).default;</span><br><span class="line">const Types = require(&apos;babel-types&apos;);</span><br><span class="line">const babel = require(&apos;babel-core&apos;);</span><br><span class="line"></span><br><span class="line">//解析需要遍历的文件夹，我这以E盘根目录为例</span><br><span class="line">var filePath = path.resolve(&apos;C:\\Users\\Administrator.FO13YM4ZWHL5OAN\\Desktop\\babel\\AstForBabel\\conference&apos;);</span><br><span class="line">var reg = /(.js)$/i;</span><br><span class="line"></span><br><span class="line">//调用文件遍历方法</span><br><span class="line">fileDisplay(filePath);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 文件遍历方法</span><br><span class="line"> * @param filePath 需要遍历的文件路径</span><br><span class="line"> */</span><br><span class="line">console.log(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;程序开始&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;);</span><br><span class="line"></span><br><span class="line">function findurl(filedir)&#123;</span><br><span class="line">  // urlast转换 </span><br><span class="line">  try&#123;</span><br><span class="line">    var code =fs.readFileSync(filedir, &apos;utf8&apos;);</span><br><span class="line">    var ast = babylon.parse(code);</span><br><span class="line">    Traverse(ast,&#123;</span><br><span class="line">      Identifier(path)&#123;</span><br><span class="line">        if (path.node.name === &quot;url&quot;) &#123;</span><br><span class="line">          var parentcode = generator(path.parent).code;</span><br><span class="line">          var reg1 = /^(url)[:=\s]/i;</span><br><span class="line">          if (reg1.test(parentcode)) &#123;</span><br><span class="line">            console.log(parentcode);</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    // console.log(filedir);</span><br><span class="line">    fs.writeFile(filedir,generator(ast).code,function(err)&#123;</span><br><span class="line">        if(err) console.log(&apos;写文件操作失败&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; catch(error)&#123;</span><br><span class="line">    // console.log(&quot;!!!!!!!!!!&quot; + filedir);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fileDisplay(filePath)&#123;</span><br><span class="line">  //根据文件路径读取文件，返回文件列表</span><br><span class="line">  fs.readdir(filePath,function(err,files)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">      console.warn(err)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      //遍历读取到的文件列表</span><br><span class="line">      files.forEach(function(filename)&#123;</span><br><span class="line">        //获取当前文件的绝对路径</span><br><span class="line">        var filedir = path.join(filePath,filename);</span><br><span class="line">        //根据文件路径获取文件信息，返回一个fs.Stats对象</span><br><span class="line">        fs.stat(filedir,function(eror,stats)&#123;</span><br><span class="line">          if(eror)&#123;</span><br><span class="line">            console.warn(&apos;获取文件stats失败&apos;);</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">            var isFile = stats.isFile();//是文件</span><br><span class="line">            var isDir = stats.isDirectory();//是文件夹</span><br><span class="line">            if(isFile)&#123;</span><br><span class="line">              if (reg.test(filedir)) &#123;</span><br><span class="line">                findurl(filedir);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(isDir)&#123;</span><br><span class="line">              fileDisplay(filedir);//递归，如果是文件夹，就继续遍历该文件夹下面的文件</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　通过nodejs+babel查找所有js文件中的URL&lt;br&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础;</title>
    <link href="http://yoursite.com/2018/09/06/Redis%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/Redis基础/</id>
    <published>2018-09-06T08:54:55.000Z</published>
    <updated>2019-01-11T07:50:27.631Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ基础;</title>
    <link href="http://yoursite.com/2018/09/06/RabbitMQ%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/RabbitMQ基础/</id>
    <published>2018-09-06T08:54:20.000Z</published>
    <updated>2019-01-11T07:49:53.872Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot基础</title>
    <link href="http://yoursite.com/2018/09/06/SpringBoot%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/SpringBoot基础/</id>
    <published>2018-09-06T08:50:21.000Z</published>
    <updated>2018-09-13T01:43:47.512Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC基础;</title>
    <link href="http://yoursite.com/2018/09/06/SpringMVC%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/SpringMVC基础/</id>
    <published>2018-09-06T08:50:03.000Z</published>
    <updated>2018-09-06T08:50:03.476Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring常用配置(二);</title>
    <link href="http://yoursite.com/2018/09/06/Spring%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/09/06/Spring常用配置/</id>
    <published>2018-09-06T08:49:12.000Z</published>
    <updated>2018-09-06T08:49:12.805Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring基础</title>
    <link href="http://yoursite.com/2018/09/06/Spring%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/Spring基础/</id>
    <published>2018-09-06T08:48:45.000Z</published>
    <updated>2018-09-13T01:43:35.852Z</updated>
    
    <content type="html"><![CDATA[<p>　　Spring框架是一个 轻量级的企业级开发的站式解决方案。 所谓解决方案就是可以基于Spring解决Java EE开发的所有问题。Spring框架主要提供了IoC 容器、AOP、数据访问、Web开发、消息、测试等相关技术的支持。<br>　　Spring使用简单的POJO (Plain Old Java Object,即无任何限制的普通Java对象)来进行企业级开发。每个被Spring管理的Java对象都称之为Bean;而Spring提供了一个IoC容器用来初始化对象，解决对象间的依赖管理和对象的使用。<br><a id="more"></a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>　　Spring框架是一个 轻量级的企业级开发的站式解决方案。 所谓解决方案就是可以基于Spring解决Java EE开发的所有问题。Spring框架主要提供了IoC 容器、AOP、数据访问、Web开发、消息、测试等相关技术的支持。<br>　　Spring使用简单的POJO (Plain Old Java Object,即无任何限制的普通Java对象)来进行企业级开发。每个被Spring管理的Java对象都称之为Bean;而Spring提供了一个IoC容器用来初始化对象，解决对象间的依赖管理和对象的使用。<br>　　Spring框架本身有四大基本原则：</p><ul><li><code>使用POJO进行轻量级和最小侵入式开发</code></li><li><code>通过依赖注入和基于接口编程实现松耦合</code></li><li><code>通过AOP和默认习惯进行声明式编程</code></li><li><code>使用AOP和模版减小模版式代码</code></li></ul><h2 id="Spring的模块"><a href="#Spring的模块" class="headerlink" title="Spring的模块"></a>Spring的模块</h2><p>　　spring是模块化的，这就意味着你可以只使用你需要的spring模块。spring的模块如下所示：<br><img src="/img/Spring模块.png" alt="Spring模块"></p><h3 id="核心容器"><a href="#核心容器" class="headerlink" title="核心容器"></a>核心容器</h3><ul><li>Sning-Core：核心工具类，Sping其他模块大最使用SingCcre;</li><li>Spring-Beans：Spring 定义Bean的支持;</li><li>Spring-Context：运行时Spring容器;</li><li>Spring-Context-Support：Spring容器对第三方包的集成支持;</li><li>Spring Expression：使用表达式语言在运行时查询和操作对象;</li></ul><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><ul><li>Spring-AOP：基于代理的AOP支持;</li><li>Spring-Aspects：基于AspeetU的AOP支持。</li></ul><h3 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h3><ul><li>Spring Messaging：对消息架构和协议的支持。</li></ul><h3 id="数据访问-集成"><a href="#数据访问-集成" class="headerlink" title="数据访问/集成"></a>数据访问/集成</h3><ul><li>Spring-Web：提供基础的Web集成的功能，在Web项目中提供Spring的容器;</li><li>Spring Webmve：提供基于Servlet的Spring MVC;</li><li>Spring WebSocket：提供WebSocket功能;</li><li>Spring Webmve Porlet：提供Portlet环境支持。</li></ul><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><ul><li>SpingJDBC：提供以IDBC访问数据库的支持;</li><li>Sping-TX：提供编程式和声明式的事务支持;</li><li>Spring-ORM:提供对对象关系映射技术的支持;</li><li>SpingOXM:提供对对象人xml映射技术的支持;Snig-M提供对IMS的支持。</li></ul><h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><p>　　spring进行配置的方式本有三种：配置文件方式，注解方式和java类方式，但是由于现在较为常用的是使用springBoot进行开发提倡零配置约定大于配置默认不在有web.xml等配置文件，所以不再考虑配置文件方式。</p><h2 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h2><h3 id="配置包扫描"><a href="#配置包扫描" class="headerlink" title="配置包扫描"></a>配置包扫描</h3><h3 id="Bean的实例化方法"><a href="#Bean的实例化方法" class="headerlink" title="Bean的实例化方法"></a>Bean的实例化方法</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><h4 id="声明周期"><a href="#声明周期" class="headerlink" title="声明周期"></a>声明周期</h4><h3 id="Bean的属性注入"><a href="#Bean的属性注入" class="headerlink" title="Bean的属性注入"></a>Bean的属性注入</h3><h4 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h4><h4 id="Setter方法注入"><a href="#Setter方法注入" class="headerlink" title="Setter方法注入"></a>Setter方法注入</h4><h4 id="集合属性注入"><a href="#集合属性注入" class="headerlink" title="集合属性注入"></a>集合属性注入</h4><h2 id="java类方式"><a href="#java类方式" class="headerlink" title="java类方式"></a>java类方式</h2><h1 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><p>　　我们经常说的控制翻转(Inversion of Control-I0C)和依赖注入(dependency injecton-D)在Spring环境下是等同的概念，控制翻转是通过依赖注入实现的。所谓依赖注入指的是容基负责创建对象和维护对象的依赖关系，而不是通过对象本身负责自己的创建和解决自己的依赖。<br>　　依赖注入的主要目的是为了解耦，体现了种“组合”的理念。如果你希望你的类具各某项功能的时候，是继承自一个具有此功能的父类好呢?还是组合另外一个具有这个功能的类好呢?答案是不言而喻的，继承一个父类，子类将与父类耦合，组合另外一个类则使耦合度大大降低。<br>　　Spring IoC容器(ApplicationContext)负责创建Bcan，并通过容器将功能类Bean注入到你需要的Bean中。Spring 提供使用xml、注解、Java 配置、groovy 配置实现Bean的创建和注入。<br>　　<code>声明Bean的注解:</code></p><ul><li>@Component组件，没有明确的角色,</li><li>@Service在业务逻辑层( service层)使用,</li><li>@Repository在数据访问层(dao层)使用,</li><li>@Conroller在展现层(MVC- Spring MVC)使用,</li></ul><p>　　<code>注入Bean的注解,一般情况下通用</code></p><ul><li>@Autowired: Spring 提供的注解,</li><li>@Inject: JSR-330提供的注解,</li><li>@Resource: JSR 250提供的注解,</li></ul><p>　　@Autowired. @Inject. @Resurce可注解在se方法上或者属性上，建议注解在属性上，优点是代码更少、层次更清晰。</p><h1 id="AOP-1"><a href="#AOP-1" class="headerlink" title="AOP"></a>AOP</h1><p>　　AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。<br>　　AOP是一个概念，并没有设定具体语言的实现，它能克服那些只有单继承特性语言的缺点，spring2.0之后整合AspectJ第三方AOP技术。AspectJ是一个面向切面的框架，它扩展了Java语言。AspectJ定义了AOP语法所以它有一个专门的编译器用来生成遵守Java字节编码规范的Class文件。</p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><p>　　日志记录，性能统计，安全控制，事务处理，异常处理等等</p><h2 id="主要意图"><a href="#主要意图" class="headerlink" title="主要意图"></a>主要意图</h2><p>　　将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。</p><h2 id="AOP底层实现"><a href="#AOP底层实现" class="headerlink" title="AOP底层实现"></a>AOP底层实现</h2><p>　　AOP分为静态AOP和动态AOP。静态AOP是指AspectJ实现的AOP，他是将切面代码直接编译到Java类文件中。动态AOP是指将切面代码进行动态织入实现的AOP。Spring的AOP为动态AOP，实现的技术为： JDK提供的动态代理技术 和 CGLIB(动态字节码增强技术)。</p><h3 id="JDK动态代理和CGLIB动态代理"><a href="#JDK动态代理和CGLIB动态代理" class="headerlink" title="JDK动态代理和CGLIB动态代理"></a>JDK动态代理和CGLIB动态代理</h3><ul><li>jdk的动态代理只可以为接口去完成操作，而cglib它可以为没有实现接口的类去做代理，也可以为实现接口的类去做代理。</li><li>如果目标对象，有接口，优先使用jdk动态代理；如果目标对象，无接口，使用cglib动态代理。</li></ul><h2 id="AOP开发"><a href="#AOP开发" class="headerlink" title="AOP开发"></a>AOP开发</h2><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h3 id="IOC和DI区别"><a href="#IOC和DI区别" class="headerlink" title="IOC和DI区别?"></a>IOC和DI区别?</h3><p>　　IOC 控制反转，是指对象实例化权利由spring容器来管理<br>　　DI 依赖注入 在spring创建对象的过程中，对象所依赖的属性通过配置注入对象中，在Spring环境下是等同的概念。</p><h3 id="ApplicationContext与BeanFactory关系"><a href="#ApplicationContext与BeanFactory关系" class="headerlink" title="ApplicationContext与BeanFactory关系"></a>ApplicationContext与BeanFactory关系</h3><p><img src="/img/ApplicationContext与BeanFactory关系.png" alt=""><br>　　ApplicationContext它是扩展BeanFactory接口。BeanFactory它采取延迟加载的方案，只有真正在getBean时才会实例化Bean,在开发中我们一般使用的是ApplicationContext,真正使用的是其实现类AppliCationContext它会在配置文件加载时，就会初始化Bean,并且ApplicationContext它提供不同的应用层的Context实现。例如在web开发中可以使用WebApplicationContext<br>　　<code>FileSystemXmlAppliCationContext 根据文件路径获取</code><br>　　<code>ClassPathXmlApplicationContext  根据类路径获取</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　Spring框架是一个 轻量级的企业级开发的站式解决方案。 所谓解决方案就是可以基于Spring解决Java EE开发的所有问题。Spring框架主要提供了IoC 容器、AOP、数据访问、Web开发、消息、测试等相关技术的支持。&lt;br&gt;　　Spring使用简单的POJO (Plain Old Java Object,即无任何限制的普通Java对象)来进行企业级开发。每个被Spring管理的Java对象都称之为Bean;而Spring提供了一个IoC容器用来初始化对象，解决对象间的依赖管理和对象的使用。&lt;br&gt;
    
    </summary>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Logger 基本用法</title>
    <link href="http://yoursite.com/2018/09/04/%E4%BD%BF%E7%94%A8Logger%E8%BF%9B%E8%A1%8C%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2018/09/04/使用Logger进行日志处理/</id>
    <published>2018-09-04T12:04:54.000Z</published>
    <updated>2018-09-13T01:31:35.517Z</updated>
    
    <content type="html"><![CDATA[<p>　　简单的使用Logger进行日志处理<br><a id="more"></a></p><h1 id="一、创建Logger对象"><a href="#一、创建Logger对象" class="headerlink" title="一、创建Logger对象"></a>一、创建Logger对象</h1><p><code>static Logger getLogger(String name)</code><br>　　为指定子系统查找或创建一个 logger。<br><code>static Logger getLogger(String name, String resourceBundleName)</code><br>　　为指定子系统查找或创建一个 logger。<br>注意：name是Logger的名称，当名称相同时候，同一个名称的Logger只创建一个。</p><h1 id="二、Logger的级别"><a href="#二、Logger的级别" class="headerlink" title="二、Logger的级别"></a>二、Logger的级别</h1><p>　　比log4j的级别详细，全部定义在java.util.logging.Level里面。各级别按降序排列如下：</p><blockquote><ul><li>SEVERE（最高值）</li><li>WARNING</li><li>INFO(默认)</li><li>CONFIG</li><li>FINE</li><li>FINER</li><li>FINEST（最低值）</li></ul></blockquote><p>　　此外，还有一个级别 OFF，可用来关闭日志记录，使用级别 ALL 启用所有消息的日志记录。<br>logger默认的级别是INFO，比INFO更低的日志将不显示。</p><h1 id="三、Logger的Handler"><a href="#三、Logger的Handler" class="headerlink" title="三、Logger的Handler"></a>三、Logger的Handler</h1><p>　　创建方法:<br>　　<code>FileHandler fileHandler = new FileHandler(FILE_PATH, true);</code><br>　　<code>FILE_PATH:日志文件的路径，true：是否才用追加的方式写入日志文件</code><br>　　Handler 对象从 Logger 中获取日志信息，并将这些信息导出。例如，它可将这些信息写入控制台或文件中，也可以将这些信息发送到网络日志服务中，或将其转发到操作系统日志中。<br>　　可通过执行 setLevel(Level.OFF) 来禁用 Handler，并可通过执行适当级别的 setLevel 来重新启用。<br>　　Handler 类通常使用 LogManager 属性来设置 Handler 的 Filter、Formatter 和 Level 的默认值</p><h1 id="四、Logger的Formatter"><a href="#四、Logger的Formatter" class="headerlink" title="四、Logger的Formatter"></a>四、Logger的Formatter</h1><p>　　Formatter 为格式化 LogRecords 提供支持。<br>　　一般来说，每个日志记录 Handler 都有关联的 Formatter。Formatter 接受 LogRecord，并将它转换为一个字符串。<br>　　有些 formatter（如 XMLFormatter）需要围绕一组格式化记录来包装头部和尾部字符串。可以使用 getHeader 和 getTail 方法来获得这些字符串。<br>　　LogRecord 对象用于在日志框架和单个日志 Handler 之间传递日志请求。<br>　　<code>LogRecord(Level level, String msg)</code><br>　　Level用给定级别和消息值构造 LogRecord。</p><h1 id="五、简单案例"><a href="#五、简单案例" class="headerlink" title="五、简单案例"></a>五、简单案例</h1><p>　　日志处理类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class MyLog &#123;</span><br><span class="line">    private static Logger logger = Logger.getLogger(MyLog.class.getName());</span><br><span class="line"></span><br><span class="line">    private static String FILE_PATH = &quot;E:\\MyLog\\winfo.log&quot;;</span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            FileHandler fileHandler = new FileHandler(FILE_PATH, true);</span><br><span class="line">            fileHandler.setEncoding(&quot;utf-8&quot;);</span><br><span class="line">            MyLogFormatter sf = new MyLogFormatter();</span><br><span class="line">            fileHandler.setFormatter(sf);</span><br><span class="line">            logger.addHandler(fileHandler);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void error(Object obj) &#123;</span><br><span class="line">        //严重</span><br><span class="line">        LogRecord lr = new LogRecord(Level.SEVERE, obj.toString());</span><br><span class="line">        logger.log(lr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void warn(Object obj) &#123;</span><br><span class="line">        //警告</span><br><span class="line">        LogRecord lr = new LogRecord(Level.WARNING, obj.toString());</span><br><span class="line">        logger.log(lr);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void info(Object obj) &#123;</span><br><span class="line">        //信息</span><br><span class="line">        LogRecord lr = new LogRecord(Level.INFO, obj.toString());</span><br><span class="line">        logger.log(lr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　日志信息处理类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class OTLLogFormatter extends Formatter &#123;</span><br><span class="line">    SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy/MM/dd HH:mm:ss&quot;);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String format(LogRecord record) &#123;</span><br><span class="line">        return &quot;[&quot; + sdf.format(new Date()) + &quot;] [&quot; + record.getLevel() + &quot;] &quot;</span><br><span class="line">                + record.getMessage().replace(&quot;\r&quot;, &quot; &quot;).replace(&quot;\n&quot;, &quot; &quot;) + &quot;\r\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　测试案例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class LogTest &#123;</span><br><span class="line">       @Test</span><br><span class="line">       public void test0()&#123;</span><br><span class="line">           OTLLog.error(&quot;严重信息测试&quot;);</span><br><span class="line">       OTLLog.warn(&quot;警告信息测试&quot;);</span><br><span class="line">       OTLLog.info(&quot;信息输出测试&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　简单的使用Logger进行日志处理&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Babel简单js代码转换</title>
    <link href="http://yoursite.com/2018/08/30/Babel%E7%AE%80%E5%8D%95Js%E4%BB%A3%E7%A0%81%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2018/08/30/Babel简单Js代码转换/</id>
    <published>2018-08-30T11:17:50.000Z</published>
    <updated>2018-09-13T01:40:15.233Z</updated>
    
    <content type="html"><![CDATA[<p>　　近期get一个需求：需要对原始的js代码转换功能进行改进，在原始的通过正则匹配转换前增加一层更加准确的ast(抽象解析树)转换。初期的想法是使用jdk9，acorn和babel都进行测试然后选择最优。然后通过实践后发现jdk9只能做到对js的ast解析无法对ast进行更改以及ast转换为js操作，acorn与babel两者都是基于node.js的模块都可以实现js的转换功能但是相比而言acorn的相关文献太少且不完整，另一方面acorn主要是侧重于对js代码的解析在进行js转换的过程中发现有很多的坑步履艰难，而babel则不一样在js的解析方面是基于acorn有着与acorn几乎相同的解析速度，并且在转换方面有着一套完整的开发体系以及有着一套支持多国语言的<a href="https://github.com/jamiebuilds/babel-handbook/blob/master/README.md" target="_blank" rel="noopener">开发文档</a>学习的效率远高于acorn。<br><a id="more"></a></p><h2 id="一，简介"><a href="#一，简介" class="headerlink" title="一，简介"></a>一，简介</h2><h3 id="1-1-ast-抽象语法树"><a href="#1-1-ast-抽象语法树" class="headerlink" title="1.1 ast(抽象语法树):"></a>1.1 ast(抽象语法树):</h3><p>　　抽象语法树（abstract syntax tree或者缩写为AST），或者语法树（syntax tree），是源代码的抽象语法结构的树状表现形式，这里特指编程语言的源代码。和抽象语法树相对的是具体语法树（concrete syntaxtree），通常称作分析树（parse tree）。一般的，在源代码的翻译和编译过程中，语法分析器创建出分析树。一旦AST被创建出来，在后续的处理过程中，比如语义分析阶段，会添加一些信息。<br>　　通过AST可以对源代码进行更为准确的定位以及更换，并且有着正则无法实现的上下文结合，可以对源码进行手术刀级别的修改。<br>　　推荐两个在线生成AST工具：<a href="https://astexplorer.net/" target="_blank" rel="noopener">Astexplorer</a>，<a href="http://esprima.org/demo/parse.html#" target="_blank" rel="noopener">Esprima</a></p><h3 id="1-2-nodejs"><a href="#1-2-nodejs" class="headerlink" title="1.2 nodejs:"></a>1.2 nodejs:</h3><p>　　Nodejs框架是基于V8的引擎，是目前速度最快的Javascript引擎。chrome浏览器就基于V8，同时打开20-30个网页都很流畅。Nodejs标准的web开发框架Express，可以帮助我们迅速建立web站点，比起PHP的开发效率更高，而且学习曲线更低。<br>　　JS是脚本语言，脚本语言需要一个解析器才能运行。对于写在HTML页面里面的JS，浏览器充当了解析器的角色。而对于需要独立运行的JS，NodeJS就是一个解析器可以通过命令直接运行js。<br>　　每种解析器就是一个运行环境，不但允许JS定义各种数据结构，进行各种计算，还允许JS使用运行环境提供的内置对象和方法做一些事情。例如运行在浏览器中的JS的用途是操作DOM，浏览器就提供了document之类的内置对象。而运行在NodeJS中的JS的用途是操作磁盘文件或者搭建HTTP服务器，NodeJS就相应提供了fs、http等内置对象。<br>　　另外Node.js生态圈也是非常的强大有则很多有些的第三法模块比如本次使用的babel,acorn，Bloger的福音Hexo等</p><h3 id="1-3-babel："><a href="#1-3-babel：" class="headerlink" title="1.3 babel："></a>1.3 babel：</h3><p>　　Babel 是一个通用的多用途 JavaScript 编译器。通过 Babel 你可以使用（并创建）下一代的 JavaScript，以及下一代的 JavaScript 工具。作为一种语言，JavaScript 在不断发展，新的标准／提案和新的特性层出不穷。 在得到广泛普及之前，Babel 能够让你提前（甚至数年）使用它们。 Babel 把用最新标准编写的 JavaScript 代码向下编译成可以在今天随处可用的版本。 这一过程叫做“源码到源码”编译， 也被称为转换编译（transpiling，是一个自造合成词，即转换＋编译。以下也简称为转译）。 例如，Babel 能够将新的 ES2015 箭头函数语法：<br>　　`const square = n =&gt; n * n;<br>　　转译为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const square = function square(n) &#123;</span><br><span class="line">    return n * n;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p><p>　　不过 Babel 的用途并不止于此，它支持语法扩展，能支持像 React 所用的 JSX 语法，同时还支持用于静态类型检查的流式语法（Flow Syntax）。更重要的是，Babel 的一切都是简单的插件，谁都可以创建自己的插件，利用 Babel 的全部威力去做任何事情。再进一步，Babel 自身被分解成了数个核心模块，任何人都可以利用它们来创建下一代的 JavaScript 工具。已经有很多人都这样做了，围绕着 Babel 涌现出了非常大规模和多样化的生态系统。<br>　　以上描述来自Babel官方github，也就是说Babel可以进行js代码的转换并且拥有这丰富的插件来按照指定规则来转换，最重要的还可以通过自定义插件。(本次主要使用babel的基本语法，插件的编写在后期博客中讲解)</p><h2 id="二，安装教程"><a href="#二，安装教程" class="headerlink" title="二，安装教程"></a>二，安装教程</h2><h3 id="2-1-nodejs"><a href="#2-1-nodejs" class="headerlink" title="2.1 nodejs:"></a>2.1 nodejs:</h3><p>　　从<a href="">官网</a>上点击对应的版本下载安装包，然后无脑下一步进行安装。<br>　　配置环境变量将node.js的安装路径添加到Path当中(为了能够在windos中全局调用node.js命令)<br>　　现在就可以通过<code>node xxx.js</code>执行js文件了</p><h3 id="2-2-babel"><a href="#2-2-babel" class="headerlink" title="2.2 babel:"></a>2.2 babel:</h3><p>　　<code>babel-cli</code><br>　　Babel 的 CLI 是一种在命令行下使用 Babel 编译文件的简单方法。其安装的方法有两种：全局安装和在项目中安装，官方推荐的是在项目中安装，个人也比较认同这一点。<br>　　首先建立一个文件夹比如<code>babel</code>可以在node.js安装目录下也可以在其他目录下，建议不在node.js安装目录下，创建后在打开cmd窗口并进入该目录进行下一步操作。</p><h5 id="a）全局安装"><a href="#a）全局安装" class="headerlink" title="a）全局安装"></a>a）全局安装</h5><p>　　通过命令<code>$ npm install --global babel-cli</code>在babel-cli安装完后就可以通过执行<code>$ babel SimpleTest.js</code>来执行我们的第一个文件。不过这只是简单的将js结果输出到控制台<br>　　使用<code>$ babel example.js --out-file compiled.js</code>或者<code>$ babel example.js -o compiled.js</code>可以将结果写入到指定的文件。<br>　　如果我们想要把一个目录整个编译成一个新的目录，可以使用 –out-dir 或者 -d<code>$ babel src --out-dir lib</code> <code>$ babel src -d lib</code><br>　　如果想要卸载全局安装的babel的话可以通过执行<code>$ npm uninstall --global babel-cli</code></p><h5 id="b-在项目中安装"><a href="#b-在项目中安装" class="headerlink" title="b) 在项目中安装"></a>b) 在项目中安装</h5><p>　　通过命令<code>$ npm install --save-dev babel-cli</code>完成安装后你的<code>package.json</code>应该如下所示：<br><figure class="highlight plain"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">json&#123;</span><br><span class="line">  &quot;name&quot;: &quot;my-project&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;babel-cli&quot;: &quot;^6.0.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　如果我们不想直接从命令行运行 Babel 了，取而代之我们将把运行命令写在 npm scripts 里，这样可以使用 Babel 的本地版本。只需将 <code>scripts</code> 字段添加到你的 <code>package.json</code> 文件内并且把 babel 命令写成 build 字段。.<br><figure class="highlight plain"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot;: &quot;my-project&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">+   &quot;scripts&quot;: &#123;</span><br><span class="line">+     &quot;build&quot;: &quot;babel src -d lib&quot;</span><br><span class="line">+   &#125;,</span><br><span class="line">    &quot;devDependencies&quot;: &#123;</span><br><span class="line">      &quot;babel-cli&quot;: &quot;^6.0.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>然后在终端里运行：<code>npm run build</code>就可以了</p><h2 id="三，-进行js代码转换"><a href="#三，-进行js代码转换" class="headerlink" title="三， 进行js代码转换"></a>三， 进行js代码转换</h2><h3 id="3-1-babel的解析引擎"><a href="#3-1-babel的解析引擎" class="headerlink" title="3.1 babel的解析引擎"></a>3.1 babel的解析引擎</h3><p>　　Babel使用的引擎是babylon，babylon并非由babel团队自己开发的，而是fork的acorn项目，不过acorn引擎只提供基本的解析ast的能力。<br>　　遍历还需要配套的babel-travesal, 替换节点需要使用babel-types，而这些开发，在Babel的插件体系开发下，变得一体化了。</p><h3 id="3-2-使用babel做js的代码转换"><a href="#3-2-使用babel做js的代码转换" class="headerlink" title="3.2 使用babel做js的代码转换"></a>3.2 使用babel做js的代码转换</h3><p>　　进行js代码的转换主要分为三个步骤：js代码解析为AST树，对AST树进行遍历修改，将修改后的AST树转换为新的js代码。</p><h4 id="a-js代码解析为AST树"><a href="#a-js代码解析为AST树" class="headerlink" title="a) js代码解析为AST树"></a>a) js代码解析为AST树</h4><p>　　<a href="https://github.com/babel/babylon" target="_blank" rel="noopener"><code>babylon</code></a>&lt;–点一下，打来惊喜<br>　　将js源码转换为AST用到的模块叫：babylon，Babylon 是 Babel 的解析器。最初是 从Acorn项目fork出来的。Acorn非常快，易于使用，并且针对非标准特性(以及那些未来的标准特性) 设计了一个基于插件的架构。<br>　　运行以下命令进行安装：<br>　　<code>$ npm install --save babylon</code><br>　　使用的方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const babylon = require(&apos;babylon&apos;);</span><br><span class="line"></span><br><span class="line">const code = `function square(n) &#123;</span><br><span class="line">  return n * n;</span><br><span class="line">&#125;`;  </span><br><span class="line">console.log(babylon.parse(code));</span><br></pre></td></tr></table></figure></p><p>　　也可以通过如下的方法传递选项给parse()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">babylon.parse(code, &#123;</span><br><span class="line">  sourceType: &quot;module&quot;, // default: &quot;script&quot;</span><br><span class="line">  plugins: [&quot;jsx&quot;] // default: []</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>　　sourceType 可以是 “module” 或者 “script”，它表示 Babylon 应该用哪种模式来解析。 “module” 将会在严格模式下解析并且允许模块定义，”script” 则不会。<br>　　由于 Babylon 使用了基于插件的架构，因此有一个 plugins 选项可以开关内置的插件。 注意 Babylon 尚未对外部插件开放此 API 接口，不排除未来会开放此API。<br>　　要查看完整的插件列表，请点击这个<a href="https://github.com/babel/babylon/blob/master/README.md#plugins" target="_blank" rel="noopener">链接</a></p><h4 id="b-对AST树进行遍历修改"><a href="#b-对AST树进行遍历修改" class="headerlink" title="b) 对AST树进行遍历修改"></a>b) 对AST树进行遍历修改</h4><p>　　<a href="https://github.com/babel/babel/tree/master/packages/babel-traverse" target="_blank" rel="noopener"><code>babel-traverse</code></a>&lt;–点一下，打开惊喜<br>　　Babel Traverse模块维护了整棵树的状态，并且负责替换、移除和添加节点。<br>　　运行以下命令安装：<br>　　<code>$ npm install --save babel-traverse</code></p><h4 id="c-将修改后的AST树转换为新的js代码"><a href="#c-将修改后的AST树转换为新的js代码" class="headerlink" title="c) 将修改后的AST树转换为新的js代码"></a>c) 将修改后的AST树转换为新的js代码</h4><p>　　<a href="https://github.com/babel/babel/tree/master/packages/babel-generator" target="_blank" rel="noopener"><code>babel-generator</code></a>&lt;–点一下,打开惊喜<br>　　Babel Generator模块是 Babel 的代码生成器，它读取AST并将其转换为代码和源码映射。<br>　　<code>$ npm install --save babel-generator</code></p><h4 id="d-案例代码"><a href="#d-案例代码" class="headerlink" title="d) 案例代码"></a>d) 案例代码</h4><figure class="highlight plain"><figcaption><span>SimpleTest.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//引入fs模块</span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">//引入babel模快</span><br><span class="line">const babylon = require(&apos;babylon&apos;);</span><br><span class="line">const Traverse = require(&apos;babel-traverse&apos;).default;</span><br><span class="line">const generator = require(&apos;babel-generator&apos;).default;</span><br><span class="line">//读取js文件</span><br><span class="line">var code =fs.readFileSync(&apos;./JsFile0.js&apos;, &apos;utf8&apos;);</span><br><span class="line">//修改js</span><br><span class="line">var paths = &quot;&quot;;</span><br><span class="line">var ast = babylon.parse(code);</span><br><span class="line">Traverse(ast, &#123;</span><br><span class="line">  enter(path) &#123;</span><br><span class="line">    if (</span><br><span class="line">      path.node.type === &quot;Identifier&quot; &amp;&amp;</span><br><span class="line">      path.node.name === &quot;n&quot;</span><br><span class="line">    ) &#123;</span><br><span class="line">      path.node.name = &quot;x&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">//写入生成新的js并写入文件</span><br><span class="line">fs.writeFile(&apos;./JsFile0.js&apos;,generator(ast).code,function(err)&#123;</span><br><span class="line">    if(err) console.log(&apos;写文件操作失败&apos;);</span><br><span class="line">    else console.log(&apos;写文件操作成功&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>JsFile0.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a === n;</span><br></pre></td></tr></table></figure><ul><li>1 如果运行成功的话会在终端中输出<code>写文件操作成功</code>且JsFile0.js中的n会替换成x。</li><li>2 对于node.js当中的模块引入有两种方式<code>import</code>和<code>require</code>两种用法自行百度，我在这里说一下我用的是第二种方法因为import对于nodejs7.0以及之前的版本并不能识别。</li></ul><h3 id="3-3-通过java执行node-js"><a href="#3-3-通过java执行node-js" class="headerlink" title="3.3 通过java执行node.js"></a>3.3 通过java执行node.js</h3><p>　　通过java代码直接执行cmd命令–&gt;通过cmd来调用node.js执行js代码，原js打印到终端的信息会打印到控制台<br>　　注意事项：<br>　　　　1，java代码执行的cmd命令为项目的根目录 “/”为cmd中的下一级目录<br>　　　　2，如果执行的js文件用有引用到其他的文件相对路径是相对的cmd执行路径所以最好写成绝对路径如：“C:\a\b.js”<br>　　　　3，请耐心往下接着看，代码并非可以直接运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">public void nodeRunJ() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String line = null;</span><br><span class="line">            String command = &quot;node ./AstForBabel/SimpleTest.js&quot;;</span><br><span class="line">            Process p = Runtime.getRuntime().exec(command);</span><br><span class="line">            BufferedReader stdout = new BufferedReader(new InputStreamReader(</span><br><span class="line">                    p.getInputStream()));</span><br><span class="line">            while ((line = stdout.readLine()) != null) &#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">            stdout.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>由于编写的js代码用有用到babel模块中的一些函数，所以代码并非可以直接运行需要现在你的java工程中将之前安装的babel模块同样的安装在项目当中。</li><li>其实通过测试也可以不用重新安装可以将之前的<code>babel</code>目录下的文件直接粘贴到工程当中就可以。如果想要确定是否好使，稳妥起见最好现在项目的目录下打开终端运行一下node命令看是否可以运行</li></ul><h2 id="四，-FAQ"><a href="#四，-FAQ" class="headerlink" title="四， FAQ"></a>四， FAQ</h2><h3 id="在安装过程中出现错误，无法找到package-json"><a href="#在安装过程中出现错误，无法找到package-json" class="headerlink" title="* 在安装过程中出现错误，无法找到package.json"></a>* 在安装过程中出现错误，无法找到<code>package.json</code></h3><p>　　可以先执行<code>$ npm init</code>命令然后按照提示回车,回车完成安装生成一个初始化的环境，然后再执行babel的安装</p><h3 id="bbb"><a href="#bbb" class="headerlink" title="* bbb"></a>* bbb</h3><h3 id="ccc"><a href="#ccc" class="headerlink" title="* ccc"></a>* ccc</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　近期get一个需求：需要对原始的js代码转换功能进行改进，在原始的通过正则匹配转换前增加一层更加准确的ast(抽象解析树)转换。初期的想法是使用jdk9，acorn和babel都进行测试然后选择最优。然后通过实践后发现jdk9只能做到对js的ast解析无法对ast进行更改以及ast转换为js操作，acorn与babel两者都是基于node.js的模块都可以实现js的转换功能但是相比而言acorn的相关文献太少且不完整，另一方面acorn主要是侧重于对js代码的解析在进行js转换的过程中发现有很多的坑步履艰难，而babel则不一样在js的解析方面是基于acorn有着与acorn几乎相同的解析速度，并且在转换方面有着一套完整的开发体系以及有着一套支持多国语言的&lt;a href=&quot;https://github.com/jamiebuilds/babel-handbook/blob/master/README.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开发文档&lt;/a&gt;学习的效率远高于acorn。&lt;br&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>JavaScrpt解析</title>
    <link href="http://yoursite.com/2018/08/28/JavaScrpt%E8%A7%A3%E6%9E%90ast/"/>
    <id>http://yoursite.com/2018/08/28/JavaScrpt解析ast/</id>
    <published>2018-08-28T08:09:46.000Z</published>
    <updated>2018-08-28T09:01:51.848Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p><p>#使用Java解析javascript(jdk1.9+)<br>链接一:java10解析Javascript相关官方api<br><code>https://docs.oracle.com/javase/10/docs/api/index.html?overview-summary.html</code></p><p>#使用 Acorn 来解析 JavaScript<br>链接一：Acorn github仓库<br><code>https://github.com/acornjs/acorn</code><br>链接二：掘金上前辈使用感悟<br><code>https://juejin.im/post/582425402e958a129926fcb4</code></p><p>#使用babel解析JavaScript<br>链接一：Babel Handbook<br><code>https://github.com/jamiebuilds/Babel Handbookbabel-handbook</code><br>链接二：Babel github仓库<br><code>https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>坤哥：相识度匹配</title>
    <link href="http://yoursite.com/2018/08/25/%E5%9D%A4%E5%93%A5%EF%BC%9A%E7%9B%B8%E8%AF%86%E5%BA%A6%E5%8C%B9%E9%85%8D/"/>
    <id>http://yoursite.com/2018/08/25/坤哥：相识度匹配/</id>
    <published>2018-08-25T07:52:49.000Z</published>
    <updated>2018-09-13T01:57:23.724Z</updated>
    
    <content type="html"><![CDATA[<p>　　应室友坤哥需要，做了一个字符串处理小Demo，主要匹配连个字符串的相似程度。<br><a id="more"></a><br>　　应坤哥要求做一个小功能要求如下：<br>　　有两个酒店名列表:A、B,将俩个列表中的酒店两两进行匹配，从B酒店列表中找出对应A中酒店相似度最高的酒店，并两两一组进行展示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import org.junit.Test;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line"></span><br><span class="line">public class Test4&#123;</span><br><span class="line">    public int xsd(String s1 ,String s2)&#123;</span><br><span class="line">        char[] chars1 = s1.replace(&quot;(&quot;,&quot;&quot;).replace(&quot;)&quot;,&quot;&quot;)</span><br><span class="line">                .replace(&quot;酒店&quot;,&quot;&quot;).replace(&quot;店&quot;,&quot;&quot;)</span><br><span class="line">                .toCharArray();</span><br><span class="line">        char[] chars2 = s2.replace(&quot;(&quot;,&quot;&quot;).replace(&quot;)&quot;,&quot;&quot;)</span><br><span class="line">                .replace(&quot;酒店&quot;,&quot;&quot;).replace(&quot;店&quot;,&quot;&quot;)</span><br><span class="line">                .toCharArray();</span><br><span class="line">        int a = 0;</span><br><span class="line">        for (char c1:chars1) &#123;</span><br><span class="line">            for (char c2: chars2 ) &#123;</span><br><span class="line">                if (c1==c2)&#123;</span><br><span class="line">                    a ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        String str1 = &quot;莫泰连锁酒店(孙权路店)，怡莱连锁酒店(杭州保俶精品店)，杭州米兰风尚酒店，浙江梅地亚宾馆(杭州)，杭州宏丽宾馆，怡莱连锁酒店(杭州解放路精品店)，浙江紫晶大酒店，杭州索菲特世外桃源度假酒店，杭州国际假日酒店，杭州开元名都大酒店，杭州瑞豪中心酒店，杭州新开元大酒店，杭州香格里拉饭店，杭州华辰银座酒店，杭州金马饭店，杭州海外海·西溪宾馆，杭州福朋喜来登酒店，杭州国大雷迪森广场酒店&quot;;</span><br><span class="line">        String str2 = &quot;富阳国际贸易中心大酒店，富阳太阳城堡大酒店，富阳半岛会所酒店，怡莱连锁酒店(杭州保俶店)，莫泰连锁酒店(富阳孙权路店)，富春山居度假村，郑州悦莱酒店，郑州德盛易客酒店，郑州海天大酒店，米兰风尚大酒店，浙江梅地亚宾馆，宏丽宾馆，怡莱连锁酒店(解放路精品店)，浙江紫晶大酒店，索菲特世外桃源度假酒店，杭州国际假日酒店，开元名都酒店，杭州海外海西溪宾馆&quot;;</span><br><span class="line">        String[] strings1 = str1.split(&quot;，&quot;);</span><br><span class="line">        String[] strings2 = str2.split(&quot;，&quot;);</span><br><span class="line">        int a = 0;</span><br><span class="line">        HashMap&lt;String,String&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        for (String s1:strings1) &#123;</span><br><span class="line">            for (String s2:strings2) &#123;</span><br><span class="line">               int b = xsd(s1,s2);</span><br><span class="line">               if (b&gt;=3&amp;&amp;b&gt;a)&#123;</span><br><span class="line">                   map.put(s1,s2);</span><br><span class="line">                   a = b;</span><br><span class="line">               &#125;else&#123;</span><br><span class="line">                   map.put(s1,null);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            a = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        for (String s:map.toString().split(&quot;, &quot;)) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　应室友坤哥需要，做了一个字符串处理小Demo，主要匹配连个字符串的相似程度。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
