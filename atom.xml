<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>117blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-09T01:35:57.408Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ChicWu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Centos7常用配置</title>
    <link href="http://yoursite.com/2019/01/08/Centos7%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/01/08/Centos7常用配置/</id>
    <published>2019-01-08T06:41:07.000Z</published>
    <updated>2019-01-09T01:35:57.408Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p><h1 id="应用加密"><a href="#应用加密" class="headerlink" title="应用加密"></a>应用加密</h1><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><h2 id="Weblogic"><a href="#Weblogic" class="headerlink" title="Weblogic"></a>Weblogic</h2><h1 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
      <category term="备忘录" scheme="http://yoursite.com/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Centos常用服务安装</title>
    <link href="http://yoursite.com/2019/01/08/Centos%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/01/08/Centos常用服务安装/</id>
    <published>2019-01-08T06:40:46.000Z</published>
    <updated>2019-01-08T13:14:23.837Z</updated>
    
    <content type="html"><![CDATA[<p>　　Linux环境下常用的一些软件的安装教程以及启动和访问方法（持续更新）<br><a id="more"></a></p><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><p>1，下载nginx (版本随意，本人用的是 nginx-1.10.1)</p><p>　　下载地址：<code>http://nginx.org/en/download.html</code></p><p>2，对压缩包进行解压。</p><p>　　命令: <code>tar nginx-1.10.1.tar.gz</code>    </p><p>3，安装依赖</p><p>　　命令:<code>yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</code></p><p>4，进入解压后的目录，执行<code>./configure</code>，在执行成功后回出现一些nginx安装相关的信息</p><p><img src="/img/nginx2.png" alt="nginx安装相关新在"></p><p>5，成功后在解压后的目录中进行编译和安装 <code>make &amp;&amp; make install</code></p><p>6，这时会发现在/usr/local目录下生生成了nginx目录</p><p>7，启动nginx</p><p>　　进入nginx启动目录<code>cd /usr/local/nginx/sbin</code></p><p>　　执行启动命令 <code>./nginx</code></p><p>8，关闭nginx</p><p>　　命令<code>./nginx -sstop</code></p><p>9，访问测试，浏览器输入<code>http://ip</code></p><h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">#运行用户</span><br><span class="line">user nobody;</span><br><span class="line">#启动进程,通常设置成和cpu的数量相等</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#全局错误日志及PID文件</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#工作模式及连接数上限</span><br><span class="line">events &#123;</span><br><span class="line">    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,</span><br><span class="line">    #仅用于linux2.6以上内核,可以大大提高nginx的性能</span><br><span class="line">    use   epoll; </span><br><span class="line"></span><br><span class="line">    #单个后台worker process进程的最大并发链接数    </span><br><span class="line">    worker_connections  1024;</span><br><span class="line"></span><br><span class="line">    # 并发总数是 worker_processes 和 worker_connections 的乘积</span><br><span class="line">    # 即 max_clients = worker_processes * worker_connections</span><br><span class="line">    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么</span><br><span class="line">    # 为什么上面反向代理要除以4，应该说是一个经验值</span><br><span class="line">    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000</span><br><span class="line">    # worker_connections 值的设置跟物理内存大小有关</span><br><span class="line">    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数</span><br><span class="line">    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右</span><br><span class="line">    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：</span><br><span class="line">    # $ cat /proc/sys/fs/file-max</span><br><span class="line">    # 输出 34336</span><br><span class="line">    # 32000 &lt; 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内</span><br><span class="line">    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置</span><br><span class="line">    # 使得并发总数小于操作系统可以打开的最大文件数目</span><br><span class="line">    # 其实质也就是根据主机的物理CPU和内存进行配置</span><br><span class="line">    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。</span><br><span class="line">    # ulimit -SHn 65535</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    #设定mime类型,类型由mime.type文件定义</span><br><span class="line">    include    mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #设定日志格式</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，</span><br><span class="line">    #对于普通应用，必须设为 on,</span><br><span class="line">    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，</span><br><span class="line">    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span><br><span class="line">    sendfile     on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #连接超时时间</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    tcp_nodelay     on;</span><br><span class="line"></span><br><span class="line">    #开启gzip压缩</span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_disable &quot;MSIE [1-6].&quot;;</span><br><span class="line"></span><br><span class="line">    #设定请求缓冲</span><br><span class="line">    client_header_buffer_size    128k;</span><br><span class="line">    large_client_header_buffers  4 128k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #设定虚拟主机配置</span><br><span class="line">    server &#123;</span><br><span class="line">        #侦听80端口</span><br><span class="line">        listen    80;</span><br><span class="line">        #定义使用 www.nginx.cn访问</span><br><span class="line">        server_name  www.nginx.cn;</span><br><span class="line"></span><br><span class="line">        #定义服务器的默认网站根目录位置</span><br><span class="line">        root html;</span><br><span class="line"></span><br><span class="line">        #设定本虚拟主机的访问日志</span><br><span class="line">        access_log  logs/nginx.access.log  main;</span><br><span class="line"></span><br><span class="line">        #默认请求</span><br><span class="line">        location / &#123;</span><br><span class="line">            </span><br><span class="line">            #定义首页索引文件的名称</span><br><span class="line">            index index.php index.html index.htm;   </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 定义错误提示页面</span><br><span class="line">        error_page   500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #静态文件，nginx自己处理</span><br><span class="line">        location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</span><br><span class="line">            </span><br><span class="line">            #过期30天，静态文件不怎么更新，过期可以设大一点，</span><br><span class="line">            #如果频繁更新，则可以设置得小一点。</span><br><span class="line">            expires 30d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #禁止访问 .htxxx 文件</span><br><span class="line">            location ~ /.ht &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><h2 id="安装教程-1"><a href="#安装教程-1" class="headerlink" title="安装教程"></a>安装教程</h2><h1 id="rabbitMQ"><a href="#rabbitMQ" class="headerlink" title="rabbitMQ"></a>rabbitMQ</h1><h2 id="安装使用教程"><a href="#安装使用教程" class="headerlink" title="安装使用教程"></a>安装使用教程</h2><p>1，下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.6/rabbitmq-server-3.6.6-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><p>2，安装</p><p>　　<code>yum install rabbitmq-server-3.6.6-1.el7.noarch.rpm</code></p><p>3，一些基本操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chkconfig rabbitmq-server on  # 添加开机启动RabbitMQ服务</span><br><span class="line">$ sudo /sbin/service rabbitmq-server start # 启动服务</span><br><span class="line">$ sudo /sbin/service rabbitmq-server status  # 查看服务状态</span><br><span class="line">$ sudo /sbin/service rabbitmq-server stop   # 停止服务</span><br><span class="line"> </span><br><span class="line"># 查看当前所有用户</span><br><span class="line">$ sudo rabbitmqctl list_users</span><br><span class="line"> </span><br><span class="line"># 查看默认guest用户的权限</span><br><span class="line">$ sudo rabbitmqctl list_user_permissions guest</span><br><span class="line"> </span><br><span class="line"># 由于RabbitMQ默认的账号用户名和密码都是guest。为了安全起见, 先删掉默认用户</span><br><span class="line">$ sudo rabbitmqctl delete_user guest</span><br><span class="line"> </span><br><span class="line"># 添加新用户</span><br><span class="line">$ sudo rabbitmqctl add_user username password</span><br><span class="line"> </span><br><span class="line"># 设置用户tag</span><br><span class="line">$ sudo rabbitmqctl set_user_tags username administrator</span><br><span class="line"> </span><br><span class="line"># 赋予用户默认vhost的全部操作权限</span><br><span class="line">$ sudo rabbitmqctl set_permissions -p / username &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line"> </span><br><span class="line"># 查看用户的权限</span><br><span class="line">$ sudo rabbitmqctl list_user_permissions username</span><br></pre></td></tr></table></figure><p>4，开启web管理接口</p><p>　　如果只从命令行操作RabbitMQ，多少有点不方便。幸好RabbitMQ自带了web管理界面，只需要启动插件便可以使用。</p><p>　　<code>$ sudo rabbitmq-plugins enable rabbitmq_management</code></p><p>　　然后通过浏览器访问<code>http://ip:15672</code>输入用户名和密码访问web管理界面了。</p><p>5，开启用户远程访问</p><p>　　默认情况下，RabbitMQ的默认的<code>guest</code>用户只允许本机访问， 如果想让<code>guest</code>用户能够远程访问的话，只需要将配置文件中的<code>loopback_users</code>列表置为空即可，如下：</p><p>　　<code>{loopback_users, []}</code></p><p>　　另外关于新添加的用户，直接就可以从远程访问的，如果想让新添加的用户只能本地访问，可以将用户名添加到上面的列表, 如只允许<code>admin</code>用户本机访问。</p><p>　　<code>{loopback_users, [&quot;admin&quot;]}</code></p><p>　　更新配置后，别忘了重启服务</p><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p>　　试着在腾讯云服务器上部署web应用，就想着先搭建一下服务器环境，操作系统选的是centos7，在安装好jdk，tomcat后测试可以部署web应用就准备再安装一个mysql数据库，之前试过好几种方式都是以初始密码找不到告终，这次就又重新百度安装方式。</p><p>　　据说centos7没有mysql 的yum源，于是就直接从网上下载mysql的repo源（这个玩意目前还没仔细探究是什么东西，在centos里面应该会涉及到），使用</p><p>　　<code>wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</code></p><p>　　从网上下载这个rpm包（这里wget 命令是从网络上下载文件的命令一般的格式为wget +url），下载好rpm包后安装这个包</p><p>　　<code>rpm -ivh mysql-community-release-el7-5.noarch.rpm</code><br>　　安装好这个rpm包后，开始安装mysql-server </p><p>　　<code>sudo yum install mysql-server</code><br>　　之后就是网络下载安装了，在中间会出现两个需要选择的地方都填“y”回车就行，然后就会显示安装成功</p><p>　　然后我们来测试是否安装成功，这时如果直接像windows下一样输入mysql -uroot -p可能会出现一些错误（ERROR 2002 (HY000): Can‘t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock‘ (2)）原因是mysql这个文件的权限问题，需要把这个文件的权限改为当前用户</p><p>　　 <code>sudo chown -R openscanner:openscanner /var/lib/mysql</code><br>　　然后就重启服务重新直接登录root用户　<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　　service mysqld restart</span><br><span class="line">　　mysql -u root</span><br></pre></td></tr></table></figure></p><p>　　这样就会进入到mysql服务，也就是我们常用的mysql命令行，这时就要来修改root用户的密码了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　use mysql;</span><br><span class="line">　　update user set password=password(&apos;new password&apos;) where user=&apos;root&apos;;</span><br><span class="line">　　flush privileges;</span><br></pre></td></tr></table></figure></p><p>　　这里的第一句是选用需要修改的数据库，在mysql中用户名密码都在数据库名为mysql的这个库中，在修改数据库中的数据表前都需要使用use命令选中使用哪个数据库，第二句是更新数据表user中root用户的密码为新密码，第三句是将前面所做的修改在系统中刷新生效。</p><p>　　然后就可以使用exit命令退出然后重新使用mysql -uroot -p 回车然后输入新密码进入mysql了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　Linux环境下常用的一些软件的安装教程以及启动和访问方法（持续更新）&lt;br&gt;
    
    </summary>
    
    
      <category term="备忘录" scheme="http://yoursite.com/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Jsoup</title>
    <link href="http://yoursite.com/2019/01/03/jsoup/"/>
    <id>http://yoursite.com/2019/01/03/jsoup/</id>
    <published>2019-01-03T05:49:03.402Z</published>
    <updated>2018-09-13T06:07:14.466Z</updated>
    
    <content type="html"><![CDATA[<p>　　对HTML页面的解析，之前我一般使用HTMLParser，详细见HTMLParser的学习系列 - 学习总结，但是这个项目已经停止更新。现在比较好的解析HTML的控件是Jsoup。本文对Jsoup的用法做个总结.<br><a id="more"></a></p><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h4><p>　　Jsoup的主要功能有三部分组成：<br>　　<code>a) 从字符串，网页，本地文件等方式生成Documentn</code><br>　　<code>b) 在生成Doucment后，根据Dom和css或类似jquery的selector语法获取Element，然后再从Elements中获取节点属性、文本、html</code><br>　　<code>c) 对Element的进行操作，包括HTML的值、节点内容的值和设置节点属性的值下方每节对以上三点进行逐一演示。</code></p><h6 id="POM-xml-配置"><a href="#POM-xml-配置" class="headerlink" title="POM.xml 配置"></a>POM.xml 配置</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.jsoup&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jsoup&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.10.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="2-生成Document"><a href="#2-生成Document" class="headerlink" title="2.生成Document"></a>2.生成Document</h4><p>　　JSOUP通过不同方式生成Document，主要有以下三种：<br>　　<code>a) 字符串</code><br>　　<code>b) 网页</code><br>　　<code>c) 本地文件</code></p><h6 id="2-1-从字符串生成Document"><a href="#2-1-从字符串生成Document" class="headerlink" title="2.1 从字符串生成Document"></a>2.1 从字符串生成Document</h6><p>　　关键方法： Jsoup.parse(String html)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void fromString() &#123;</span><br><span class="line">       String html = &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;First parse&lt;/title&gt;&lt;/head&gt;&quot;</span><br><span class="line">               + &quot;&lt;body&gt;&lt;p&gt;Parsed HTML into a doc.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;;</span><br><span class="line">       Document document = Jsoup.parse(html);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h6 id="2-2-从网页生成Document"><a href="#2-2-从网页生成Document" class="headerlink" title="2.2 从网页生成Document"></a>2.2 从网页生成Document</h6><p>　　关键方法： Jsoup.connect()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void fromURL() &#123;</span><br><span class="line">    Document document;</span><br><span class="line">    try &#123;</span><br><span class="line">    //通过URL+访问的方法获取Document</span><br><span class="line">        document = Jsoup.connect(&quot;https://www.baidu.com/&quot;).get();</span><br><span class="line">        // 从document中获取title值</span><br><span class="line">        String title = document.title();</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="2-3-从本地文件生成Document"><a href="#2-3-从本地文件生成Document" class="headerlink" title="2.3 从本地文件生成Document"></a>2.3 从本地文件生成Document</h6><p>　　关键方法： Jsoup.connect(File file,String charset)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void fromFile()&#123;</span><br><span class="line">        File file = new File(&quot;filePath&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            //通过文件+编码集来获取Document</span><br><span class="line">            Document document = Jsoup.parse(file,&quot;utf-8&quot;);</span><br><span class="line">            System.out.println(document.title());</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-获取Element及节点属性、文本、html"><a href="#3-获取Element及节点属性、文本、html" class="headerlink" title="3. 获取Element及节点属性、文本、html"></a>3. 获取Element及节点属性、文本、html</h4><p>　　在上一节中已经生成Document，下面就可以对这个document进行操作，操作的主要单位是Element，下面介绍如何选取elment及获取elment的内容。</p><h6 id="3-1-获取Element，获取的方式分为二种"><a href="#3-1-获取Element，获取的方式分为二种" class="headerlink" title="3.1 获取Element，获取的方式分为二种:"></a>3.1 获取Element，获取的方式分为二种:</h6><p>　　<code>a) 通过DOM解析来获取;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void extractDataByDOM() throws IOException&#123;</span><br><span class="line">    Document doc = Jsoup.connect(&quot;https://www.baidu.com/&quot;).get();</span><br><span class="line">    Element lg = doc.getElementById(&quot;lg&quot;);</span><br><span class="line">    logger.info(&quot;getElementById lg = &#123;&#125;&quot;, lg);</span><br><span class="line">    Elements links = doc.getElementsByTag(&quot;a&quot;);</span><br><span class="line">    for (Element link : links) &#123;</span><br><span class="line">      String linkHref = link.attr(&quot;href&quot;);</span><br><span class="line">      String linkText = link.text();</span><br><span class="line">      logger.info(&quot;linkHref=&#123;&#125;, linkText=&#123;&#125;&quot;,linkHref, linkText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　<code>b) 通过css或类似jquery的selector语法来获取；</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public void select4J() throws IOException&#123;</span><br><span class="line">    File input = new File(&quot;filePath&quot;);</span><br><span class="line">    Document document = Jsoup.parse(input, &quot;UTF-8&quot;, &quot;http://example.com/&quot;);</span><br><span class="line"></span><br><span class="line">    // 获取所有的a节点</span><br><span class="line">    Elements links = document.select(&quot;a[href]&quot;);</span><br><span class="line">    System.out.println(links);</span><br><span class="line">    // 获取img的src以.png结果结尾</span><br><span class="line">    Elements pngs = document.select(&quot;img[src$=.png]&quot;);</span><br><span class="line">    System.out.println(pngs);</span><br><span class="line">    // 获取class=masthead的div节点</span><br><span class="line">    Element masthead = document.select(&quot;div.masthead&quot;).first();</span><br><span class="line">    System.out.println(masthead);</span><br><span class="line"></span><br><span class="line">    // 获取class=r的h3节点下面的a节点</span><br><span class="line">    Elements resultLinks = document.select(&quot;h3.r &gt; a&quot;);</span><br><span class="line">    System.out.println(resultLinks);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="3-2-获取节点属性、文本、html"><a href="#3-2-获取节点属性、文本、html" class="headerlink" title="3.2 获取节点属性、文本、html"></a>3.2 获取节点属性、文本、html</h6><h6 id="3-3-Select选择器"><a href="#3-3-Select选择器" class="headerlink" title="3.3 Select选择器"></a>3.3 Select选择器</h6><h4 id="4-设置节点值"><a href="#4-设置节点值" class="headerlink" title="4. 设置节点值"></a>4. 设置节点值</h4><p>　　设置节点值，主要有在以下方式：<br>　　<code>a) 设置节点HTML的值</code><br>　　<code>b) 设置节点内容的值</code><br>　　<code>c) 设置节点属性的值</code></p><h6 id="4-1-设置节点HTML的值"><a href="#4-1-设置节点HTML的值" class="headerlink" title="4.1 设置节点HTML的值"></a>4.1 设置节点HTML的值</h6><p>　　1. Element.html：使用新的HTML替换旧的值<br>　　2. Element.prepend：将新html添加到指定节点内部的最前面<br>　　3. Element.append：将新html添加到指定节点内部的最后面<br>　　4. Element.wrap:将指定节点封装到html最里面</p><h6 id="4-2-设置节点内容的值"><a href="#4-2-设置节点内容的值" class="headerlink" title="4.2 设置节点内容的值"></a>4.2 设置节点内容的值</h6><p>　　1. Element.text: 完全替换内容<br>　　2. Element.prepend:在节点的内容最前面加内容<br>　　3. Element.append：在节点的内容最后面加内容</p><h6 id="4-3-设置节点属性的值"><a href="#4-3-设置节点属性的值" class="headerlink" title="4.3 设置节点属性的值"></a>4.3 设置节点属性的值</h6><p>　　1. element.attr: 设置属性<br>　　2. element.addClass: 设置class</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　对HTML页面的解析，之前我一般使用HTMLParser，详细见HTMLParser的学习系列 - 学习总结，但是这个项目已经停止更新。现在比较好的解析HTML的控件是Jsoup。本文对Jsoup的用法做个总结.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>随笔记</title>
    <link href="http://yoursite.com/2018/09/25/%E9%9A%8F%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/09/25/随笔记/</id>
    <published>2018-09-25T01:16:19.000Z</published>
    <updated>2018-09-25T01:19:18.971Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔记" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>责任链设计模式</title>
    <link href="http://yoursite.com/2018/09/12/%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/09/12/责任链设计模式/</id>
    <published>2018-09-12T11:18:45.000Z</published>
    <updated>2018-09-13T01:25:17.890Z</updated>
    
    <content type="html"><![CDATA[<p>　　责任链设计模式属于行为类设计模式，责任链设计模式顾名思义就好比链表一样，不同的是责任链是由多个处理不同任务的对象节点组成，每个对象节点包含着责任链上下一个对象节点的引用，这样请求就可以在这条链上进行传递，直到有一个对象节点可以处理请求，或者每个对象节点都可以处理请求，并传递给下家，直到链上的每个对象节点都处理完，这样就能在不影响客户端的前提下在责任链上任意的更改处理对象节点。<br><a id="more"></a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>　　例如我们去政府部门去办事，有时候就会遇见官员责任踢球，这就是一个责任链，你的问题我能够解决我就解决，如果我不能解决就推卸给另一个部门，至于谁最后处理这个事情，政府部门为了将屁民的请求也官员耦合在一起，让多个（部门）都可以接受请求，将这些（部门）对象连接成一条链，并且沿着这条链传递请求，直到有（部门）对象处理它为止。</p><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><ul><li>降低客户段与处理节点的耦合度</li><li>简化处理节点的相互连接</li><li>增强了给处理节点指派职责的灵活性</li><li>简化了如何增加一个处理节点</li><li><code>缺点</code>：不能保证请求一定被接收；且对于比较长的职责链，请求的处理可能涉及到多个处理对象，系统性能将受到一定影响，而且在进行代码调试时不太方便；另外如果使用不恰当容易产生循环调用。</li></ul><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p><img src="/img/责任链设计模式1.jpg" alt="结构"><br>　　一个典型的对象结构可能如下图所示：<br><img src="/img/责任链设计模式2.jpg" alt="结构"><br>　　主要有以下三个对象组成：</p><ul><li>Handler(抽象处理者)：定义一个处理请求的接口，和一个后继连接(可选)</li><li>ConcreteHandler(具体处理者)：处理它所负责的请求，可以访问后继者，如果可以处理请求则处理，否则将该请求转给他的后继者。</li><li>Client(客户类)：向一个链上的具体处理者ConcreteHandler对象提交请求。</li></ul><h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><p>　　责任链按照处理对象处理的方法可以分为两种模式：<br>　　a) 纯的责任链模式：一个具体处理者角色处理只能对请求作出两种行为中的一个：一个是自己处理（承担责任）；另一个是把责任推给下家。<code>不允许出现某一个具体处理者对象在承担了一部分责任后又将责任向下传</code>的情况。请求在责任链中必须被处理，<code>不能出现无果而终的结局</code>。<br>　　b) 不纯的责任链模式：在一个纯的职责链模式里面，一个请求必须被某一个处理者对象所接收；在一个不纯的职责链模式里面，一个请求可以最终不被任何接收端对象所接收。</p><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>　　a) 不纯的责任链模式：<br>　　Servlet中的过滤器就采用了不纯的责任链模式，FIlter中的FilterChan对象保存了最终到Servlet对象的所有FIlter对象，这些对象存储在ApplicationFIlterChan对象的Fil数组中，在FilterChain链上没执行一个Filter对象，数组的当前计数就会增加1，直到计数等于数组的长度为止，当FilterChain上的所有Filte执行完毕后就会执行Servlet，所以ApplicationFilterChain中会持有Servlet对象的引用。<br>　　b) 纯的责任链设计模式：</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　责任链设计模式属于行为类设计模式，责任链设计模式顾名思义就好比链表一样，不同的是责任链是由多个处理不同任务的对象节点组成，每个对象节点包含着责任链上下一个对象节点的引用，这样请求就可以在这条链上进行传递，直到有一个对象节点可以处理请求，或者每个对象节点都可以处理请求，并传递给下家，直到链上的每个对象节点都处理完，这样就能在不影响客户端的前提下在责任链上任意的更改处理对象节点。&lt;br&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>InnerClass</title>
    <link href="http://yoursite.com/2018/09/12/%E9%9C%87%E6%83%8A%EF%BC%81%E5%A4%96%E9%83%A8%E7%B1%BB%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E5%86%85%E9%83%A8%E7%B1%BBprivate%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2018/09/12/震惊！外部类可以访问内部类private变量/</id>
    <published>2018-09-12T06:08:55.000Z</published>
    <updated>2018-09-13T06:44:13.493Z</updated>
    
    <content type="html"><![CDATA[<p>　　<code>震惊！外部类竟可以访问内部类private变量！！！</code><br><a id="more"></a><br>　　标题致敬著名的某头条，在最近的开发过程中写了一段类似与这样的代码，惊奇的发现外部类竟然能对内部类做这样的事情！！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class OuterClass &#123;</span><br><span class="line">    private String outerStr;</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        new InnerClass().innerStr = &quot;外部类也可以修改内部类私有变量&quot; ;</span><br><span class="line">    &#125;</span><br><span class="line">    public class InnerClass&#123;</span><br><span class="line">        private String innerStr;</span><br><span class="line">        public void test1()&#123;</span><br><span class="line">            outerStr = &quot;内部类可以直接修改外部类私有变量&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　以我的暴脾气，既然遇见了一个问题就要刨根问底然后我有写了如下的测试，分别测试了成员内部类和方法内部类的私有变量以及私有方法的，并且还特地的将成员内部类与方法内部类写成了一样的。发现并不会出现类冲突，但是在方法内方法内部类会覆盖掉成员内部类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class OuterClass &#123;</span><br><span class="line">    private String outerStr = &quot;外部类的私有变量&quot;;</span><br><span class="line">    //成员内部类</span><br><span class="line">    private class InnerClass&#123;</span><br><span class="line">        private InnerClass()&#123;</span><br><span class="line">            System.out.println(&quot;外部类可以调用成员内部类的私有构造方法&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        private String innerStr = &quot;成员内部类的私有变量&quot;;</span><br><span class="line">        private void test()&#123;</span><br><span class="line">            System.out.println(&quot;成员内部类可以直接调用&quot;+outerStr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        System.out.println(&quot;外部类可以通过实例对象调用&quot;+new InnerClass().innerStr);</span><br><span class="line">        new InnerClass().test();</span><br><span class="line">        //方法内部类</span><br><span class="line">        class InnerClass&#123;</span><br><span class="line">            private InnerClass()&#123;</span><br><span class="line">                System.out.println(&quot;外部类可以调用方法内部类的私有构造方法&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            private String innerStr = &quot;方法内部类的私有变量&quot;;</span><br><span class="line">            private void test()&#123;</span><br><span class="line">                System.out.println(&quot;方法内部类可以直接调用&quot;+outerStr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //注意要有先后顺序</span><br><span class="line">        System.out.println(&quot;外部类可以通过实例对象调用&quot;+new InnerClass().innerStr);</span><br><span class="line">        new InnerClass().test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　<code>运行结果：</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">外部类可以调用成员内部类的私有构造方法</span><br><span class="line">外部类可以通过实例对象调用成员内部类的私有变量</span><br><span class="line">外部类可以调用成员内部类的私有构造方法</span><br><span class="line">成员内部类可以直接调用外部类的私有变量</span><br><span class="line">外部类可以调用方法内部类的私有构造方法</span><br><span class="line">外部类可以通过实例对象调用方法内部类的私有变量</span><br><span class="line">外部类可以调用方法内部类的私有构造方法</span><br><span class="line">方法内部类可以直接调用外部类的私有变量</span><br></pre></td></tr></table></figure></p><p>　　言归正传，下面正式开始全面解析内部类。</p><h1 id="为什么使用内部类"><a href="#为什么使用内部类" class="headerlink" title="为什么使用内部类"></a>为什么使用内部类</h1><h1 id="内部类与外部类的联系"><a href="#内部类与外部类的联系" class="headerlink" title="内部类与外部类的联系"></a>内部类与外部类的联系</h1><h2 id="内部类访问外部类"><a href="#内部类访问外部类" class="headerlink" title="内部类访问外部类"></a>内部类访问外部类</h2><h2 id="外部类访问内部类"><a href="#外部类访问内部类" class="headerlink" title="外部类访问内部类"></a>外部类访问内部类</h2><h1 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h1><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><h2 id="方法内部类"><a href="#方法内部类" class="headerlink" title="方法内部类"></a>方法内部类</h2><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;code&gt;震惊！外部类竟可以访问内部类private变量！！！&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Babel过滤URL</title>
    <link href="http://yoursite.com/2018/09/11/babel%E8%BF%87%E6%BB%A4URL/"/>
    <id>http://yoursite.com/2018/09/11/babel过滤URL/</id>
    <published>2018-09-11T08:30:18.000Z</published>
    <updated>2018-09-13T02:55:01.852Z</updated>
    
    <content type="html"><![CDATA[<p>　　通过nodejs+babel查找所有js文件中的URL<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">const babylon = require(&apos;babylon&apos;);</span><br><span class="line">const Traverse = require(&apos;babel-traverse&apos;).default;</span><br><span class="line">const generator = require(&apos;babel-generator&apos;).default;</span><br><span class="line">const Types = require(&apos;babel-types&apos;);</span><br><span class="line">const babel = require(&apos;babel-core&apos;);</span><br><span class="line"></span><br><span class="line">//解析需要遍历的文件夹，我这以E盘根目录为例</span><br><span class="line">var filePath = path.resolve(&apos;C:\\Users\\Administrator.FO13YM4ZWHL5OAN\\Desktop\\babel\\AstForBabel\\conference&apos;);</span><br><span class="line">var reg = /(.js)$/i;</span><br><span class="line"></span><br><span class="line">//调用文件遍历方法</span><br><span class="line">fileDisplay(filePath);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 文件遍历方法</span><br><span class="line"> * @param filePath 需要遍历的文件路径</span><br><span class="line"> */</span><br><span class="line">console.log(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;程序开始&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;);</span><br><span class="line"></span><br><span class="line">function findurl(filedir)&#123;</span><br><span class="line">  // urlast转换 </span><br><span class="line">  try&#123;</span><br><span class="line">    var code =fs.readFileSync(filedir, &apos;utf8&apos;);</span><br><span class="line">    var ast = babylon.parse(code);</span><br><span class="line">    Traverse(ast,&#123;</span><br><span class="line">      Identifier(path)&#123;</span><br><span class="line">        if (path.node.name === &quot;url&quot;) &#123;</span><br><span class="line">          var parentcode = generator(path.parent).code;</span><br><span class="line">          var reg1 = /^(url)[:=\s]/i;</span><br><span class="line">          if (reg1.test(parentcode)) &#123;</span><br><span class="line">            console.log(parentcode);</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    // console.log(filedir);</span><br><span class="line">    fs.writeFile(filedir,generator(ast).code,function(err)&#123;</span><br><span class="line">        if(err) console.log(&apos;写文件操作失败&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; catch(error)&#123;</span><br><span class="line">    // console.log(&quot;!!!!!!!!!!&quot; + filedir);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fileDisplay(filePath)&#123;</span><br><span class="line">  //根据文件路径读取文件，返回文件列表</span><br><span class="line">  fs.readdir(filePath,function(err,files)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">      console.warn(err)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      //遍历读取到的文件列表</span><br><span class="line">      files.forEach(function(filename)&#123;</span><br><span class="line">        //获取当前文件的绝对路径</span><br><span class="line">        var filedir = path.join(filePath,filename);</span><br><span class="line">        //根据文件路径获取文件信息，返回一个fs.Stats对象</span><br><span class="line">        fs.stat(filedir,function(eror,stats)&#123;</span><br><span class="line">          if(eror)&#123;</span><br><span class="line">            console.warn(&apos;获取文件stats失败&apos;);</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">            var isFile = stats.isFile();//是文件</span><br><span class="line">            var isDir = stats.isDirectory();//是文件夹</span><br><span class="line">            if(isFile)&#123;</span><br><span class="line">              if (reg.test(filedir)) &#123;</span><br><span class="line">                findurl(filedir);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(isDir)&#123;</span><br><span class="line">              fileDisplay(filedir);//递归，如果是文件夹，就继续遍历该文件夹下面的文件</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　通过nodejs+babel查找所有js文件中的URL&lt;br&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础;</title>
    <link href="http://yoursite.com/2018/09/06/Linux%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/Linux基础/</id>
    <published>2018-09-06T08:56:02.000Z</published>
    <updated>2018-09-06T08:56:02.363Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Filter基础;</title>
    <link href="http://yoursite.com/2018/09/06/Filter%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/Filter基础/</id>
    <published>2018-09-06T08:55:30.000Z</published>
    <updated>2018-09-06T08:55:30.845Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redis基础;</title>
    <link href="http://yoursite.com/2018/09/06/Redis%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/Redis基础/</id>
    <published>2018-09-06T08:54:55.000Z</published>
    <updated>2018-09-06T08:54:55.915Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Docker基础;</title>
    <link href="http://yoursite.com/2018/09/06/Docker%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/Docker基础/</id>
    <published>2018-09-06T08:54:28.000Z</published>
    <updated>2018-09-06T08:54:28.834Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MQ基础;</title>
    <link href="http://yoursite.com/2018/09/06/MQ%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/MQ基础/</id>
    <published>2018-09-06T08:54:20.000Z</published>
    <updated>2018-09-06T08:54:20.120Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hibernate进阶;</title>
    <link href="http://yoursite.com/2018/09/06/Hibernate%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2018/09/06/Hibernate进阶/</id>
    <published>2018-09-06T08:54:04.000Z</published>
    <updated>2018-09-06T08:54:04.037Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hibernate基础;</title>
    <link href="http://yoursite.com/2018/09/06/Hibernate%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/Hibernate基础/</id>
    <published>2018-09-06T08:53:46.000Z</published>
    <updated>2018-09-06T08:53:46.881Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MyBatis进阶;</title>
    <link href="http://yoursite.com/2018/09/06/MyBatis%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2018/09/06/MyBatis进阶/</id>
    <published>2018-09-06T08:53:12.000Z</published>
    <updated>2018-09-06T08:53:12.901Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MyBatis基础;</title>
    <link href="http://yoursite.com/2018/09/06/MyBatis%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/MyBatis基础/</id>
    <published>2018-09-06T08:52:55.000Z</published>
    <updated>2018-09-06T08:52:55.449Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot的数据访问;</title>
    <link href="http://yoursite.com/2018/09/06/SpringBoot%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/"/>
    <id>http://yoursite.com/2018/09/06/SpringBoot的数据访问/</id>
    <published>2018-09-06T08:51:17.000Z</published>
    <updated>2018-09-06T08:51:17.341Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot的Web开发;</title>
    <link href="http://yoursite.com/2018/09/06/SpringBoot%E7%9A%84Web%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2018/09/06/SpringBoot的Web开发/</id>
    <published>2018-09-06T08:51:07.000Z</published>
    <updated>2018-09-06T08:51:07.090Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot核心;</title>
    <link href="http://yoursite.com/2018/09/06/SpringBoot%E6%A0%B8%E5%BF%83/"/>
    <id>http://yoursite.com/2018/09/06/SpringBoot核心/</id>
    <published>2018-09-06T08:50:33.000Z</published>
    <updated>2018-09-06T08:50:33.903Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot基础</title>
    <link href="http://yoursite.com/2018/09/06/SpringBoot%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/SpringBoot基础/</id>
    <published>2018-09-06T08:50:21.000Z</published>
    <updated>2018-09-13T01:43:47.512Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
