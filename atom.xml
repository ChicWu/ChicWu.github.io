<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>117blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-31T09:27:06.163Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ChicWu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>babel简单使用(一)js代码转换</title>
    <link href="http://yoursite.com/2018/08/30/babel%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8(%E4%B8%80)js%E4%BB%A3%E7%A0%81%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2018/08/30/babel简单使用(一)js代码转换/</id>
    <published>2018-08-30T11:17:50.000Z</published>
    <updated>2018-08-31T09:27:06.163Z</updated>
    
    <content type="html"><![CDATA[<p>　　近期get一个需求：需要对原始的js代码转换功能进行改进，在原始的通过正则匹配转换前增加一层更加准确的ast(抽象解析树)转换。初期的想法是使用jdk9，acorn和babel都进行测试然后选择最优。然后通过实践后发现jdk9只能做到对js的ast解析无法对ast进行更改以及ast转换为js操作，acorn与babel两者都是基于node.js的模块都可以实现js的转换功能但是相比而言acorn的相关文献太少且不完整，另一方面acorn主要是侧重于对js代码的解析在进行js转换的过程中发现有很多的坑步履艰难，而babel则不一样在js的解析方面是基于acorn有着与acorn几乎相同的解析速度，并且在转换方面有着一套完整的开发体系以及有着一套支持多国语言的<a href="https://github.com/jamiebuilds/babel-handbook/blob/master/README.md" target="_blank" rel="noopener">开发文档</a>学习的效率远高于acorn。<br><a id="more"></a></p><h2 id="一，简介"><a href="#一，简介" class="headerlink" title="一，简介"></a>一，简介</h2><h3 id="1-1-ast-抽象语法树"><a href="#1-1-ast-抽象语法树" class="headerlink" title="1.1 ast(抽象语法树):"></a>1.1 ast(抽象语法树):</h3><p>　　抽象语法树（abstract syntax tree或者缩写为AST），或者语法树（syntax tree），是源代码的抽象语法结构的树状表现形式，这里特指编程语言的源代码。和抽象语法树相对的是具体语法树（concrete syntaxtree），通常称作分析树（parse tree）。一般的，在源代码的翻译和编译过程中，语法分析器创建出分析树。一旦AST被创建出来，在后续的处理过程中，比如语义分析阶段，会添加一些信息。<br>　　通过AST可以对源代码进行更为准确的定位以及更换，并且有着正则无法实现的上下文结合，可以对源码进行手术刀级别的修改。<br>　　推荐两个在线生成AST工具：<a href="https://astexplorer.net/" target="_blank" rel="noopener">Astexplorer</a>，<a href="http://esprima.org/demo/parse.html#" target="_blank" rel="noopener">Esprima</a></p><h3 id="1-2-nodejs"><a href="#1-2-nodejs" class="headerlink" title="1.2 nodejs:"></a>1.2 nodejs:</h3><p>　　Nodejs框架是基于V8的引擎，是目前速度最快的Javascript引擎。chrome浏览器就基于V8，同时打开20-30个网页都很流畅。Nodejs标准的web开发框架Express，可以帮助我们迅速建立web站点，比起PHP的开发效率更高，而且学习曲线更低。<br>　　JS是脚本语言，脚本语言需要一个解析器才能运行。对于写在HTML页面里面的JS，浏览器充当了解析器的角色。而对于需要独立运行的JS，NodeJS就是一个解析器可以通过命令直接运行js。<br>　　每种解析器就是一个运行环境，不但允许JS定义各种数据结构，进行各种计算，还允许JS使用运行环境提供的内置对象和方法做一些事情。例如运行在浏览器中的JS的用途是操作DOM，浏览器就提供了document之类的内置对象。而运行在NodeJS中的JS的用途是操作磁盘文件或者搭建HTTP服务器，NodeJS就相应提供了fs、http等内置对象。<br>　　另外Node.js生态圈也是非常的强大有则很多有些的第三法模块比如本次使用的babel,acorn，Bloger的福音Hexo等</p><h3 id="1-3-babel："><a href="#1-3-babel：" class="headerlink" title="1.3 babel："></a>1.3 babel：</h3><p>　　Babel 是一个通用的多用途 JavaScript 编译器。通过 Babel 你可以使用（并创建）下一代的 JavaScript，以及下一代的 JavaScript 工具。作为一种语言，JavaScript 在不断发展，新的标准／提案和新的特性层出不穷。 在得到广泛普及之前，Babel 能够让你提前（甚至数年）使用它们。 Babel 把用最新标准编写的 JavaScript 代码向下编译成可以在今天随处可用的版本。 这一过程叫做“源码到源码”编译， 也被称为转换编译（transpiling，是一个自造合成词，即转换＋编译。以下也简称为转译）。 例如，Babel 能够将新的 ES2015 箭头函数语法：<br>　　`const square = n =&gt; n * n;<br>　　转译为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const square = function square(n) &#123;</span><br><span class="line">    return n * n;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p><p>　　不过 Babel 的用途并不止于此，它支持语法扩展，能支持像 React 所用的 JSX 语法，同时还支持用于静态类型检查的流式语法（Flow Syntax）。更重要的是，Babel 的一切都是简单的插件，谁都可以创建自己的插件，利用 Babel 的全部威力去做任何事情。再进一步，Babel 自身被分解成了数个核心模块，任何人都可以利用它们来创建下一代的 JavaScript 工具。已经有很多人都这样做了，围绕着 Babel 涌现出了非常大规模和多样化的生态系统。<br>　　以上描述来自Babel官方github，也就是说Babel可以进行js代码的转换并且拥有这丰富的插件来按照指定规则来转换，最重要的还可以通过自定义插件。(本次主要使用babel的基本语法，插件的编写在后期博客中讲解)</p><h2 id="二，安装教程"><a href="#二，安装教程" class="headerlink" title="二，安装教程"></a>二，安装教程</h2><h3 id="2-1-nodejs"><a href="#2-1-nodejs" class="headerlink" title="2.1 nodejs:"></a>2.1 nodejs:</h3><p>　　从<a href="">官网</a>上点击对应的版本下载安装包，然后无脑下一步进行安装。<br>　　配置环境变量将node.js的安装路径添加到Path当中(为了能够在windos中全局调用node.js命令)<br>　　现在就可以通过<code>node xxx.js</code>执行js文件了</p><h3 id="2-2-babel"><a href="#2-2-babel" class="headerlink" title="2.2 babel:"></a>2.2 babel:</h3><p>　　<code>babel-cli</code><br>　　Babel 的 CLI 是一种在命令行下使用 Babel 编译文件的简单方法。其安装的方法有两种：全局安装和在项目中安装，官方推荐的是在项目中安装，个人也比较认同这一点。<br>　　首先建立一个文件夹比如<code>babel</code>可以在node.js安装目录下也可以在其他目录下，建议不在node.js安装目录下，创建后在打开cmd窗口并进入该目录进行下一步操作。</p><h5 id="a）全局安装"><a href="#a）全局安装" class="headerlink" title="a）全局安装"></a>a）全局安装</h5><p>　　通过命令<code>$ npm install --global babel-cli</code>在babel-cli安装完后就可以通过执行<code>$ babel SimpleTest.js</code>来执行我们的第一个文件。不过这只是简单的将js结果输出到控制台<br>　　使用<code>$ babel example.js --out-file compiled.js</code>或者<code>$ babel example.js -o compiled.js</code>可以将结果写入到指定的文件。<br>　　如果我们想要把一个目录整个编译成一个新的目录，可以使用 –out-dir 或者 -d<code>$ babel src --out-dir lib</code> <code>$ babel src -d lib</code><br>　　如果想要卸载全局安装的babel的话可以通过执行<code>$ npm uninstall --global babel-cli</code></p><h5 id="b-在项目中安装"><a href="#b-在项目中安装" class="headerlink" title="b) 在项目中安装"></a>b) 在项目中安装</h5><p>　　通过命令<code>$ npm install --save-dev babel-cli</code>完成安装后你的<code>package.json</code>应该如下所示：<br><figure class="highlight plain"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">json&#123;</span><br><span class="line">  &quot;name&quot;: &quot;my-project&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;babel-cli&quot;: &quot;^6.0.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　如果我们不想直接从命令行运行 Babel 了，取而代之我们将把运行命令写在 npm scripts 里，这样可以使用 Babel 的本地版本。只需将 <code>scripts</code> 字段添加到你的 <code>package.json</code> 文件内并且把 babel 命令写成 build 字段。.<br><figure class="highlight plain"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot;: &quot;my-project&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">+   &quot;scripts&quot;: &#123;</span><br><span class="line">+     &quot;build&quot;: &quot;babel src -d lib&quot;</span><br><span class="line">+   &#125;,</span><br><span class="line">    &quot;devDependencies&quot;: &#123;</span><br><span class="line">      &quot;babel-cli&quot;: &quot;^6.0.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>然后在终端里运行：<code>npm run build</code>就可以了</p><h2 id="三，-进行js代码转换"><a href="#三，-进行js代码转换" class="headerlink" title="三， 进行js代码转换"></a>三， 进行js代码转换</h2><h3 id="3-1-babel的解析引擎"><a href="#3-1-babel的解析引擎" class="headerlink" title="3.1 babel的解析引擎"></a>3.1 babel的解析引擎</h3><p>　　Babel使用的引擎是babylon，babylon并非由babel团队自己开发的，而是fork的acorn项目，不过acorn引擎只提供基本的解析ast的能力。<br>　　遍历还需要配套的babel-travesal, 替换节点需要使用babel-types，而这些开发，在Babel的插件体系开发下，变得一体化了。</p><h3 id="3-2-使用babel做js的代码转换"><a href="#3-2-使用babel做js的代码转换" class="headerlink" title="3.2 使用babel做js的代码转换"></a>3.2 使用babel做js的代码转换</h3><p>　　进行js代码的转换主要分为三个步骤：js代码解析为AST树，对AST树进行遍历修改，将修改后的AST树转换为新的js代码。</p><h4 id="a-js代码解析为AST树"><a href="#a-js代码解析为AST树" class="headerlink" title="a) js代码解析为AST树"></a>a) js代码解析为AST树</h4><p>　　<a href="https://github.com/babel/babylon" target="_blank" rel="noopener"><code>babylon</code></a>&lt;–点一下，打来惊喜<br>　　将js源码转换为AST用到的模块叫：babylon，Babylon 是 Babel 的解析器。最初是 从Acorn项目fork出来的。Acorn非常快，易于使用，并且针对非标准特性(以及那些未来的标准特性) 设计了一个基于插件的架构。<br>　　运行以下命令进行安装：<br>　　<code>$ npm install --save babylon</code><br>　　使用的方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const babylon = require(&apos;babylon&apos;);</span><br><span class="line"></span><br><span class="line">const code = `function square(n) &#123;</span><br><span class="line">  return n * n;</span><br><span class="line">&#125;`;  </span><br><span class="line">console.log(babylon.parse(code));</span><br></pre></td></tr></table></figure></p><p>　　也可以通过如下的方法传递选项给parse()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">babylon.parse(code, &#123;</span><br><span class="line">  sourceType: &quot;module&quot;, // default: &quot;script&quot;</span><br><span class="line">  plugins: [&quot;jsx&quot;] // default: []</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>　　sourceType 可以是 “module” 或者 “script”，它表示 Babylon 应该用哪种模式来解析。 “module” 将会在严格模式下解析并且允许模块定义，”script” 则不会。<br>　　由于 Babylon 使用了基于插件的架构，因此有一个 plugins 选项可以开关内置的插件。 注意 Babylon 尚未对外部插件开放此 API 接口，不排除未来会开放此API。<br>　　要查看完整的插件列表，请点击这个<a href="https://github.com/babel/babylon/blob/master/README.md#plugins" target="_blank" rel="noopener">链接</a></p><h4 id="b-对AST树进行遍历修改"><a href="#b-对AST树进行遍历修改" class="headerlink" title="b) 对AST树进行遍历修改"></a>b) 对AST树进行遍历修改</h4><p>　　<a href="https://github.com/babel/babel/tree/master/packages/babel-traverse" target="_blank" rel="noopener"><code>babel-traverse</code></a>&lt;–点一下，打开惊喜<br>　　Babel Traverse模块维护了整棵树的状态，并且负责替换、移除和添加节点。<br>　　运行以下命令安装：<br>　　<code>$ npm install --save babel-traverse</code></p><h4 id="c-将修改后的AST树转换为新的js代码"><a href="#c-将修改后的AST树转换为新的js代码" class="headerlink" title="c) 将修改后的AST树转换为新的js代码"></a>c) 将修改后的AST树转换为新的js代码</h4><p>　　<a href="https://github.com/babel/babel/tree/master/packages/babel-generator" target="_blank" rel="noopener"><code>babel-generator</code></a>&lt;–点一下,打开惊喜<br>　　Babel Generator模块是 Babel 的代码生成器，它读取AST并将其转换为代码和源码映射。<br>　　<code>$ npm install --save babel-generator</code></p><h4 id="d-案例代码"><a href="#d-案例代码" class="headerlink" title="d) 案例代码"></a>d) 案例代码</h4><figure class="highlight plain"><figcaption><span>SimpleTest.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//引入fs模块</span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">//引入babel模快</span><br><span class="line">const babylon = require(&apos;babylon&apos;);</span><br><span class="line">const Traverse = require(&apos;babel-traverse&apos;).default;</span><br><span class="line">const generator = require(&apos;babel-generator&apos;).default;</span><br><span class="line">//读取js文件</span><br><span class="line">var code =fs.readFileSync(&apos;./JsFile0.js&apos;, &apos;utf8&apos;);</span><br><span class="line">//修改js</span><br><span class="line">var paths = &quot;&quot;;</span><br><span class="line">var ast = babylon.parse(code);</span><br><span class="line">Traverse(ast, &#123;</span><br><span class="line">  enter(path) &#123;</span><br><span class="line">    if (</span><br><span class="line">      path.node.type === &quot;Identifier&quot; &amp;&amp;</span><br><span class="line">      path.node.name === &quot;n&quot;</span><br><span class="line">    ) &#123;</span><br><span class="line">      path.node.name = &quot;x&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">//写入生成新的js并写入文件</span><br><span class="line">fs.writeFile(&apos;./JsFile0.js&apos;,generator(ast).code,function(err)&#123;</span><br><span class="line">    if(err) console.log(&apos;写文件操作失败&apos;);</span><br><span class="line">    else console.log(&apos;写文件操作成功&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>JsFile0.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a === n;</span><br></pre></td></tr></table></figure><ul><li>1 如果运行成功的话会在终端中输出<code>写文件操作成功</code>且JsFile0.js中的n会替换成x。</li><li>2 对于node.js当中的模块引入有两种方式<code>import</code>和<code>require</code>两种用法自行百度，我在这里说一下我用的是第二种方法因为import对于nodejs7.0以及之前的版本并不能识别。</li></ul><h3 id="3-3-通过java执行node-js"><a href="#3-3-通过java执行node-js" class="headerlink" title="3.3 通过java执行node.js"></a>3.3 通过java执行node.js</h3><p>　　通过java代码直接执行cmd命令–&gt;通过cmd来调用node.js执行js代码，原js打印到终端的信息会打印到控制台<br>　　注意事项：<br>　　　　1，java代码执行的cmd命令为项目的根目录 “/”为cmd中的下一级目录<br>　　　　2，如果执行的js文件用有引用到其他的文件相对路径是相对的cmd执行路径所以最好写成绝对路径如：“C:\a\b.js”<br>　　　　3，请耐心往下接着看，代码并非可以直接运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">public void nodeRunJ() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String line = null;</span><br><span class="line">            String command = &quot;node ./AstForBabel/SimpleTest.js&quot;;</span><br><span class="line">            Process p = Runtime.getRuntime().exec(command);</span><br><span class="line">            BufferedReader stdout = new BufferedReader(new InputStreamReader(</span><br><span class="line">                    p.getInputStream()));</span><br><span class="line">            while ((line = stdout.readLine()) != null) &#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">            stdout.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>由于编写的js代码用有用到babel模块中的一些函数，所以代码并非可以直接运行需要现在你的java工程中将之前安装的babel模块同样的安装在项目当中。</li><li>其实通过测试也可以不用重新安装可以将之前的<code>babel</code>目录下的文件直接粘贴到工程当中就可以。如果想要确定是否好使，稳妥起见最好现在项目的目录下打开终端运行一下node命令看是否可以运行</li></ul><h2 id="四，-FAQ"><a href="#四，-FAQ" class="headerlink" title="四， FAQ"></a>四， FAQ</h2><h3 id="在安装过程中出现错误，无法找到package-json"><a href="#在安装过程中出现错误，无法找到package-json" class="headerlink" title="* 在安装过程中出现错误，无法找到package.json"></a>* 在安装过程中出现错误，无法找到<code>package.json</code></h3><p>　　可以先执行<code>$ npm init</code>命令然后按照提示回车,回车完成安装生成一个初始化的环境，然后再执行babel的安装</p><h3 id="bbb"><a href="#bbb" class="headerlink" title="* bbb"></a>* bbb</h3><h3 id="ccc"><a href="#ccc" class="headerlink" title="* ccc"></a>* ccc</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　近期get一个需求：需要对原始的js代码转换功能进行改进，在原始的通过正则匹配转换前增加一层更加准确的ast(抽象解析树)转换。初期的想法是使用jdk9，acorn和babel都进行测试然后选择最优。然后通过实践后发现jdk9只能做到对js的ast解析无法对ast进行更改以及ast转换为js操作，acorn与babel两者都是基于node.js的模块都可以实现js的转换功能但是相比而言acorn的相关文献太少且不完整，另一方面acorn主要是侧重于对js代码的解析在进行js转换的过程中发现有很多的坑步履艰难，而babel则不一样在js的解析方面是基于acorn有着与acorn几乎相同的解析速度，并且在转换方面有着一套完整的开发体系以及有着一套支持多国语言的&lt;a href=&quot;https://github.com/jamiebuilds/babel-handbook/blob/master/README.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开发文档&lt;/a&gt;学习的效率远高于acorn。&lt;br&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>JavaScrpt解析</title>
    <link href="http://yoursite.com/2018/08/28/JavaScrpt%E8%A7%A3%E6%9E%90ast/"/>
    <id>http://yoursite.com/2018/08/28/JavaScrpt解析ast/</id>
    <published>2018-08-28T08:09:46.000Z</published>
    <updated>2018-08-28T09:01:51.848Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p><p>#使用Java解析javascript(jdk1.9+)<br>链接一:java10解析Javascript相关官方api<br><code>https://docs.oracle.com/javase/10/docs/api/index.html?overview-summary.html</code></p><p>#使用 Acorn 来解析 JavaScript<br>链接一：Acorn github仓库<br><code>https://github.com/acornjs/acorn</code><br>链接二：掘金上前辈使用感悟<br><code>https://juejin.im/post/582425402e958a129926fcb4</code></p><p>#使用babel解析JavaScript<br>链接一：Babel Handbook<br><code>https://github.com/jamiebuilds/Babel Handbookbabel-handbook</code><br>链接二：Babel github仓库<br><code>https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>坤哥：相识度匹配</title>
    <link href="http://yoursite.com/2018/08/25/%E5%9D%A4%E5%93%A5%EF%BC%9A%E7%9B%B8%E8%AF%86%E5%BA%A6%E5%8C%B9%E9%85%8D/"/>
    <id>http://yoursite.com/2018/08/25/坤哥：相识度匹配/</id>
    <published>2018-08-25T07:52:49.000Z</published>
    <updated>2018-08-25T08:05:09.977Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a><br>　　应坤哥要求做一个小功能要求如下：<br>　　有两个酒店名列表:A、B,将俩个列表中的酒店两两进行匹配，从B酒店列表中找出对应A中酒店相似度最高的酒店，并两两一组进行展示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import org.junit.Test;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line"></span><br><span class="line">public class Test4&#123;</span><br><span class="line">    public int xsd(String s1 ,String s2)&#123;</span><br><span class="line">        char[] chars1 = s1.replace(&quot;(&quot;,&quot;&quot;).replace(&quot;)&quot;,&quot;&quot;)</span><br><span class="line">                .replace(&quot;酒店&quot;,&quot;&quot;).replace(&quot;店&quot;,&quot;&quot;)</span><br><span class="line">                .toCharArray();</span><br><span class="line">        char[] chars2 = s2.replace(&quot;(&quot;,&quot;&quot;).replace(&quot;)&quot;,&quot;&quot;)</span><br><span class="line">                .replace(&quot;酒店&quot;,&quot;&quot;).replace(&quot;店&quot;,&quot;&quot;)</span><br><span class="line">                .toCharArray();</span><br><span class="line">        int a = 0;</span><br><span class="line">        for (char c1:chars1) &#123;</span><br><span class="line">            for (char c2: chars2 ) &#123;</span><br><span class="line">                if (c1==c2)&#123;</span><br><span class="line">                    a ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        String str1 = &quot;莫泰连锁酒店(孙权路店)，怡莱连锁酒店(杭州保俶精品店)，杭州米兰风尚酒店，浙江梅地亚宾馆(杭州)，杭州宏丽宾馆，怡莱连锁酒店(杭州解放路精品店)，浙江紫晶大酒店，杭州索菲特世外桃源度假酒店，杭州国际假日酒店，杭州开元名都大酒店，杭州瑞豪中心酒店，杭州新开元大酒店，杭州香格里拉饭店，杭州华辰银座酒店，杭州金马饭店，杭州海外海·西溪宾馆，杭州福朋喜来登酒店，杭州国大雷迪森广场酒店&quot;;</span><br><span class="line">        String str2 = &quot;富阳国际贸易中心大酒店，富阳太阳城堡大酒店，富阳半岛会所酒店，怡莱连锁酒店(杭州保俶店)，莫泰连锁酒店(富阳孙权路店)，富春山居度假村，郑州悦莱酒店，郑州德盛易客酒店，郑州海天大酒店，米兰风尚大酒店，浙江梅地亚宾馆，宏丽宾馆，怡莱连锁酒店(解放路精品店)，浙江紫晶大酒店，索菲特世外桃源度假酒店，杭州国际假日酒店，开元名都酒店，杭州海外海西溪宾馆&quot;;</span><br><span class="line">        String[] strings1 = str1.split(&quot;，&quot;);</span><br><span class="line">        String[] strings2 = str2.split(&quot;，&quot;);</span><br><span class="line">        int a = 0;</span><br><span class="line">        HashMap&lt;String,String&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        for (String s1:strings1) &#123;</span><br><span class="line">            for (String s2:strings2) &#123;</span><br><span class="line">               int b = xsd(s1,s2);</span><br><span class="line">               if (b&gt;=3&amp;&amp;b&gt;a)&#123;</span><br><span class="line">                   map.put(s1,s2);</span><br><span class="line">                   a = b;</span><br><span class="line">               &#125;else&#123;</span><br><span class="line">                   map.put(s1,null);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            a = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        for (String s:map.toString().split(&quot;, &quot;)) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ThreadLocal的使用</title>
    <link href="http://yoursite.com/2018/08/20/ThreadLocal/"/>
    <id>http://yoursite.com/2018/08/20/ThreadLocal/</id>
    <published>2018-08-20T09:19:43.000Z</published>
    <updated>2018-08-24T06:55:41.600Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p><h1 id="一、-ThreadLocal-线程局部变量"><a href="#一、-ThreadLocal-线程局部变量" class="headerlink" title="一、 ThreadLocal(线程局部变量)"></a>一、 ThreadLocal(线程局部变量)</h1><h2 id="1-1-ThreadLocal-API"><a href="#1-1-ThreadLocal-API" class="headerlink" title="1.1 ThreadLocal API"></a>1.1 ThreadLocal API</h2><p>　　ThreadLocal类只有三个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void set(T value)：保存值；</span><br><span class="line">T get()：获取值；</span><br><span class="line">void remove()：移除值;</span><br></pre></td></tr></table></figure></p><h2 id="1-2-ThreadLocal的内部是Map"><a href="#1-2-ThreadLocal的内部是Map" class="headerlink" title="1.2 ThreadLocal的内部是Map"></a>1.2 ThreadLocal的内部是Map</h2><p>　　ThreadLocal内部其实是个Map来保存数据。虽然在使用ThreadLocal时只给出了值，没有给出键，其实它内部使用了当前线程做为键。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class MyThreadLocal&lt;T&gt; &#123;</span><br><span class="line">    private Map&lt;Thread,T&gt; map = new HashMap&lt;Thread,T&gt;();</span><br><span class="line">    public void set(T value) &#123;</span><br><span class="line">        map.put(Thread.currentThread(), value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void remove() &#123;</span><br><span class="line">        map.remove(Thread.currentThread());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T get() &#123;</span><br><span class="line">        return map.get(Thread.currentThread());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、-Service事务"><a href="#二、-Service事务" class="headerlink" title="二、 Service事务"></a>二、 Service事务</h1><h2 id="2-1-DAO中的事务"><a href="#2-1-DAO中的事务" class="headerlink" title="2.1 DAO中的事务"></a>2.1 DAO中的事务</h2><p>　　在DAO中处理事务真是“小菜一碟”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public void xxx() &#123;</span><br><span class="line">    Connection con = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        con = JdbcUtils.getConnection();</span><br><span class="line">        con.setAutoCommitted(false);</span><br><span class="line">        QueryRunner qr = new QueryRunner();</span><br><span class="line">        String sql = …;</span><br><span class="line">        Object[] params = …;</span><br><span class="line">        qr.update(con, sql, params);</span><br><span class="line">        sql = …;</span><br><span class="line">        Object[] params = …;</span><br><span class="line">        qr.update(con, sql, params);</span><br><span class="line">        con.commit();</span><br><span class="line">    &#125; catch(Exception e) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if(con != null) &#123;con.rollback();&#125;</span><br><span class="line">        &#125; catch(Exception e) &#123;&#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">            con.close();</span><br><span class="line">            &#125; catch(Exception e) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-2-Service才是处理事务的地方"><a href="#2-2-Service才是处理事务的地方" class="headerlink" title="2.2 Service才是处理事务的地方"></a>2.2 Service才是处理事务的地方</h2><p>　　我们要清楚一件事，DAO中不是处理事务的地方，因为DAO中的每个方法都是对数据库的一次操作，而Service中的方法才是对应一个业务逻辑。也就是说我们需要在Service中的一方法中调用DAO的多个方法，而这些方法应该在一起事务中。<br>　　怎么才能让DAO的多个方法使用相同的Connection呢？方法不能再自己来获得Connection，而是由外界传递进去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void daoMethod1(Connection con, …) &#123;</span><br><span class="line">&#125;</span><br><span class="line">public void daoMethod2(Connection con, …) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　在Service中调用DAO的多个方法时，传递相同的Connection就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class XXXService() &#123;</span><br><span class="line">private XXXDao dao = new XXXDao();</span><br><span class="line">public void serviceMethod() &#123;</span><br><span class="line">Connection con = null;</span><br><span class="line">try &#123;</span><br><span class="line">con = JdbcUtils.getConnection();</span><br><span class="line">con.setAutoCommitted(false);</span><br><span class="line">dao.daoMethod1(con, …);</span><br><span class="line">dao.doaMethod2(con, …);</span><br><span class="line">com.commint();</span><br><span class="line">&#125; catch(Exception e) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">con.rollback();</span><br><span class="line">&#125; catch(Exception e) &#123;&#125;</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">try &#123;</span><br><span class="line">con.close();</span><br><span class="line">&#125; catch(Exception e) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　但是，在Service中不应该出现Connection，它应该只在DAO中出现，因为它是JDBC的东西，JDBC的东西是用来连接数据库的，连接数据库是DAO的事儿！！！但是，事务是Service的事儿，不能放到DAO中！！！</p><h2 id="2-3-修改JdbcUtils"><a href="#2-3-修改JdbcUtils" class="headerlink" title="2.3 修改JdbcUtils"></a>2.3 修改JdbcUtils</h2><p>　　我们把对事务的开启和关闭放到JdbcUtils中，在Service中调用JdbcUtils的方法来完成事务的处理，但在Service中就不会再出现Connection这一“禁忌”了。<br>DAO中的方法不用再让Service来传递Connection了。DAO会主动从JdbcUtils中获取Connection对象，这样，JdbcUtils成为了DAO和Service的中介！<br>我们在JdbcUtils中添加beginTransaction()和rollbackTransaction()，以及commitTransaction()方法。这样在Service中的代码如下：</p><h3 id="SERVICE"><a href="#SERVICE" class="headerlink" title="SERVICE:"></a>SERVICE:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class XXXService() &#123;</span><br><span class="line">   private XXXDao dao = new XXXDao();</span><br><span class="line">   public void serviceMethod() &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">          JdbcUtils.beginTransaction();</span><br><span class="line">          dao.daoMethod1(…);</span><br><span class="line">          dao.daoMethod2(…);</span><br><span class="line">          JdbcUtils.commitTransaction();</span><br><span class="line">        &#125; catch(Exception e) &#123;</span><br><span class="line">           JdbcUtils.rollbackTransaction();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DAO"><a href="#DAO" class="headerlink" title="DAO:"></a>DAO:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void daoMethod1(…) &#123;</span><br><span class="line">  Connection con = JdbcUtils.getConnection();</span><br><span class="line">&#125;</span><br><span class="line">public void daoMethod2(…) &#123;</span><br><span class="line">  Connection con = JdbcUtils.getConnection();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　在Service中调用了JdbcUtils.beginTransaction()方法时，JdbcUtils要做准备好一个已经调用了setAutoCommitted(false)方法的Connection对象，因为在Service中调用JdbcUtils.beginTransaction()之后，马上就会调用DAO的方法，而在DAO方法中会调用JdbcUtils.getConnection()方法。这说明JdbcUtils要在getConnection()方法中返回刚刚准备好的，已经设置了手动提交的Connection对象。<br>　　在JdbcUtils中创建一个Connection con属性，当它为null时，说明没有事务！当它不为null时，表示开启了事务。<br>在没有开启事务时，可以调用“开启事务”方法；在开启事务后，可以调用“提交事务”和“回滚事务”方法；<br>　　getConnection()方法会在con不为null时返回con，再con为null时，从连接池中返回连接。</p><h4 id="beginTransaction"><a href="#beginTransaction" class="headerlink" title="beginTransaction()"></a>beginTransaction()</h4><p>　　判断con是否为null，如果不为null，就抛出异常！<br>　　如果con为null，那么从连接池中获取一个Connection对象，赋值给con！然后设置它为“手动提交”。</p><h4 id="getConnection"><a href="#getConnection" class="headerlink" title="getConnection()"></a>getConnection()</h4><p>　　判断con是否为null，如果为null说明没有事务，那么从连接池获取一个连接返回；<br>　　如果不为null，说明已经开始了事务，那么返回con属性返回。这说明在con不为null时，无论调用多少次getConnection()方法，返回的都是同个Connection对象。</p><h4 id="commitTransaction"><a href="#commitTransaction" class="headerlink" title="commitTransaction()"></a>commitTransaction()</h4><p>　　判断con是否为null，如果为null，说明没有开启事务就提交事务，那么抛出异常；<br>　　如果con不为null，那么调用con的commit()方法来提交事务；<br>　　调用con.close()方法关闭连接；<br>　　con = null，这表示事务已经结束！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">JdbcUtils.java</span><br><span class="line">public class JdbcUtils &#123;</span><br><span class="line">    private static DataSource dataSource = new ComboPooledDataSource();</span><br><span class="line">    private static Connection con = null;</span><br><span class="line"></span><br><span class="line">    public static DataSource getDataSource() &#123;</span><br><span class="line">        return dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Connection getConnection() throws SQLException &#123;</span><br><span class="line">        if(con == null) &#123;</span><br><span class="line">            return dataSource.getConnection();</span><br><span class="line">        &#125;</span><br><span class="line">        return con;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void beginTranscation() throws SQLException &#123;</span><br><span class="line">        if(con != null) &#123;</span><br><span class="line">            throw new SQLException(&quot;事务已经开启，在没有结束当前事务时，不能再开启事务！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        con = dataSource.getConnection();</span><br><span class="line">        con.setAutoCommit(false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void commitTransaction() throws SQLException &#123;</span><br><span class="line">        if(con == null) &#123;</span><br><span class="line">            throw new SQLException(&quot;当前没有事务，所以不能提交事务！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        con.commit();</span><br><span class="line">        con.close();</span><br><span class="line">        con = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void rollbackTransaction() throws SQLException &#123;</span><br><span class="line">        if(con == null) &#123;</span><br><span class="line">            throw new SQLException(&quot;当前没有事务，所以不能回滚事务！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        con.rollback();</span><br><span class="line">        con.close();</span><br><span class="line">        con = null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-再次修改JdbcUtils"><a href="#2-4-再次修改JdbcUtils" class="headerlink" title="2.4 再次修改JdbcUtils"></a>2.4 再次修改JdbcUtils</h2><p>　　现在JdbcUtils有个问题，如果有两个线程！第一个线程调用了beginTransaction()方法，另一个线程再调用beginTransaction()方法时，因为con已经不再为null，所以就会抛出异常了。<br>　　我们希望JdbcUtils可以多线程环境下被使用！这说明最好的方法是为每个线程提供一个Connection，这样每个线程都可以开启自己的事务了。<br>　　还记得ThreadLocal类么？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public class JdbcUtils &#123;</span><br><span class="line">    private static DataSource dataSource = new ComboPooledDataSource();</span><br><span class="line">    private static ThreadLocal&lt;Connection&gt; tl = new ThreadLocal&lt;Connection&gt;();</span><br><span class="line"></span><br><span class="line">    public static DataSource getDataSource() &#123;</span><br><span class="line">        return dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Connection getConnection() throws SQLException &#123;</span><br><span class="line">        Connection con = tl.get();</span><br><span class="line">        if(con == null) &#123;</span><br><span class="line">            return dataSource.getConnection();</span><br><span class="line">        &#125;</span><br><span class="line">        return con;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void beginTranscation() throws SQLException &#123;</span><br><span class="line">        Connection con = tl.get();</span><br><span class="line">        if(con != null) &#123;</span><br><span class="line">            throw new SQLException(&quot;事务已经开启，在没有结束当前事务时，不能再开启事务！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        con = dataSource.getConnection();</span><br><span class="line">        con.setAutoCommit(false);</span><br><span class="line">        tl.set(con);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void commitTransaction() throws SQLException &#123;</span><br><span class="line">        Connection con = tl.get();</span><br><span class="line">        if(con == null) &#123;</span><br><span class="line">            throw new SQLException(&quot;当前没有事务，所以不能提交事务！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        con.commit();</span><br><span class="line">        con.close();</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void rollbackTransaction() throws SQLException &#123;</span><br><span class="line">        Connection con = tl.get();</span><br><span class="line">        if(con == null) &#123;</span><br><span class="line">            throw new SQLException(&quot;当前没有事务，所以不能回滚事务！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        con.rollback();</span><br><span class="line">        con.close();</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-5-转账示例"><a href="#2-5-转账示例" class="headerlink" title="2.5 转账示例"></a>2.5 转账示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class AccountDao &#123;</span><br><span class="line">    public void updateBalance(String name, double balance) throws SQLException &#123;</span><br><span class="line">        String sql = &quot;update account set balance=balance+? where name=?&quot;;</span><br><span class="line">        QueryRunner queryRunner = new QueryRunner();</span><br><span class="line">        Connection conn = JdbcUtils.getgetConnection();</span><br><span class="line">        queryRunner.query(sql,conn,name,blance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class AccountService &#123;</span><br><span class="line">    private AccountDao dao = new AccountDao();</span><br><span class="line">    public void transfer(String from, String to, double balance) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            JdbcUtils.beginTranscation();</span><br><span class="line">            dao.updateBalance(from, -balance);</span><br><span class="line">            dao.updateBalance(to, balance);</span><br><span class="line">            JdbcUtils.commitTransaction();</span><br><span class="line">        &#125; catch(Exception e) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                JdbcUtils.rollbackTransaction();</span><br><span class="line">            &#125; catch (SQLException e1) &#123;</span><br><span class="line">                throw new RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class AccountServlte extends HttpServlet</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        AccountService as = new AccountService();</span><br><span class="line">        as.transfer(&quot;zs&quot;, &quot;ls&quot;, 100);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>自定义注解@mytest</title>
    <link href="http://yoursite.com/2018/08/20/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/08/20/自定义注解/</id>
    <published>2018-08-20T09:18:57.000Z</published>
    <updated>2018-08-21T05:28:45.454Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><h4 id="步骤分析"><a href="#步骤分析" class="headerlink" title="步骤分析"></a>步骤分析</h4><p>　　<code>a) 创建自定义注解:MyTest.</code><br>　　<code>b) 定义核心运行类.CoreRunner.</code><br>　　<code>c) 在核心运行类中.获得测试类的Class.</code><br>　　<code>d) 获得Class中的所有方法.遍历得到每个方法.</code><br>　　<code>e) 判断方法上有MyTest注解,就执行该方法.</code></p><h4 id="1-编写自定义注解类"><a href="#1-编写自定义注解类" class="headerlink" title="1. 编写自定义注解类"></a>1. 编写自定义注解类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Retention(value=RetentionPolicy.RUNTIME)//元注解①</span><br><span class="line">public @interface MyTest &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="元注解-Java中用来修饰其他注释的注释"><a href="#元注解-Java中用来修饰其他注释的注释" class="headerlink" title="元注解:Java中用来修饰其他注释的注释"></a>元注解:Java中用来修饰其他注释的注释</h6><p>　　<code>@Retention(value=RetentionPolicy.RUNTIME)</code><br>　　方法内传入一个枚举分别有三个值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RetentionPolicy.SOURCE:源文件阶段</span><br><span class="line">value=RetentionPolicy.CLASS:字节码阶段</span><br><span class="line">RetentionPolicy.RUNTIME:运行阶段(创建对象阶段)</span><br></pre></td></tr></table></figure></p><p>　　用与设置注解的存在阶段,默认的自定义注解存在与源码阶段 在生成class文件后以及创建对象阶段就不存在了,所以需要将注解存在阶段延长</p><h6 id="补充-类的存在有三种阶段对应的也有三种获取的方式"><a href="#补充-类的存在有三种阶段对应的也有三种获取的方式" class="headerlink" title="补充:类的存在有三种阶段对应的也有三种获取的方式"></a>补充:类的存在有三种阶段对应的也有三种获取的方式</h6><p>　　a) 源代码阶段:以.java结尾的文件的形式存在，通过Class.forName(“类名”)方法获得。<br>　　b) 字节码阶段:将字节码文件编译后以.class结尾的文件存在，通过类名.class方式获取。<br>　　c) 创建对象阶段:JVM将字节码文件加载进内存的方法区内，通过对象.getClass方法获得。</p><h4 id="2-编写自定义注解核心运行类"><a href="#2-编写自定义注解核心运行类" class="headerlink" title="2. 编写自定义注解核心运行类"></a>2. 编写自定义注解核心运行类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    /**</span><br><span class="line">     * 获得测试类的Class.</span><br><span class="line">     * 获得Class中的所有的方法.</span><br><span class="line">     * 遍历每个方法,查看每个方法上是否有MyTest注解.</span><br><span class="line">     * 有MyTest注解,这个方法就执行</span><br><span class="line">     * boolean  isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</span><br><span class="line">     * 判断指定类型的注释是否存在于此元素上 是则返回 true，否则返回 false。</span><br><span class="line">     */</span><br><span class="line">public class CoreRunner &#123;</span><br><span class="line">    public static void main(String[] args) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        // 1.获得测试类的Class:</span><br><span class="line">        Class clazz = AnnotationDemo1.class;</span><br><span class="line">        // 2.获得Class中的所有的方法: 规定了测试的方法必须是public.</span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        // 3.遍历每个方法:</span><br><span class="line">        for(Method method:methods)&#123;</span><br><span class="line">            boolean flag = method.isAnnotationPresent(MyTest.class);</span><br><span class="line">            if(flag)&#123;</span><br><span class="line">                // 说明方法上有MyTest注解:</span><br><span class="line">                method.invoke(clazz.newInstance(), null);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-编写测试类"><a href="#3-编写测试类" class="headerlink" title="3. 编写测试类"></a>3. 编写测试类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class AnnotationDemo1 &#123;</span><br><span class="line">@MyTest</span><br><span class="line">public void demo1()&#123;</span><br><span class="line">System.out.println(&quot;demo1执行了...&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@MyTest</span><br><span class="line">public void demo2()&#123;</span><br><span class="line">System.out.println(&quot;demo2执行了...&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public void demo3()&#123;</span><br><span class="line">System.out.println(&quot;demo3执行了...&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（一）</title>
    <link href="http://yoursite.com/2018/08/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2018/08/20/设计模式（一）/</id>
    <published>2018-08-20T07:41:24.000Z</published>
    <updated>2018-08-21T05:28:26.151Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>spring boot</title>
    <link href="http://yoursite.com/2018/08/20/spring-boot/"/>
    <id>http://yoursite.com/2018/08/20/spring-boot/</id>
    <published>2018-08-20T06:09:25.000Z</published>
    <updated>2018-08-21T05:27:46.510Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>#spring boot(一)#</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;#spring boot(一)#&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Jsoup</title>
    <link href="http://yoursite.com/2018/08/18/jsoup/"/>
    <id>http://yoursite.com/2018/08/18/jsoup/</id>
    <published>2018-08-18T09:05:30.792Z</published>
    <updated>2018-08-21T05:27:25.781Z</updated>
    
    <content type="html"><![CDATA[<p>　　对HTML页面的解析，之前我一般使用HTMLParser，详细见HTMLParser的学习系列 - 学习总结，但是这个项目已经停止更新。现在比较好的解析HTML的控件是Jsoup。本文对Jsoup的用法做个总结.<br><a id="more"></a></p><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h4><p>　　Jsoup的主要功能有三部分组成：<br>　　<code>a) 从字符串，网页，本地文件等方式生成Documentn</code><br>　　<code>b) 在生成Doucment后，根据Dom和css或类似jquery的selector语法获取Element，然后再从Elements中获取节点属性、文本、html</code><br>　　<code>c) 对Element的进行操作，包括HTML的值、节点内容的值和设置节点属性的值下方每节对以上三点进行逐一演示。</code></p><h6 id="POM-xml-配置"><a href="#POM-xml-配置" class="headerlink" title="POM.xml 配置"></a>POM.xml 配置</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.jsoup&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jsoup&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.10.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="2-生成Document"><a href="#2-生成Document" class="headerlink" title="2.生成Document"></a>2.生成Document</h4><p>　　JSOUP通过不同方式生成Document，主要有以下三种：<br>　　<code>a) 字符串</code><br>　　<code>b) 网页</code><br>　　<code>c) 本地文件</code></p><h6 id="2-1-从字符串生成Document"><a href="#2-1-从字符串生成Document" class="headerlink" title="2.1 从字符串生成Document"></a>2.1 从字符串生成Document</h6><p>　　关键方法： Jsoup.parse(String html)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void fromString() &#123;</span><br><span class="line">       String html = &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;First parse&lt;/title&gt;&lt;/head&gt;&quot;</span><br><span class="line">               + &quot;&lt;body&gt;&lt;p&gt;Parsed HTML into a doc.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;;</span><br><span class="line">       Document document = Jsoup.parse(html);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h6 id="2-2-从网页生成Document"><a href="#2-2-从网页生成Document" class="headerlink" title="2.2 从网页生成Document"></a>2.2 从网页生成Document</h6><p>　　关键方法： Jsoup.connect()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void fromURL() &#123;</span><br><span class="line">    Document document;</span><br><span class="line">    try &#123;</span><br><span class="line">    //通过URL+访问的方法获取Document</span><br><span class="line">        document = Jsoup.connect(&quot;https://www.baidu.com/&quot;).get();</span><br><span class="line">        // 从document中获取title值</span><br><span class="line">        String title = document.title();</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="2-3-从本地文件生成Document"><a href="#2-3-从本地文件生成Document" class="headerlink" title="2.3 从本地文件生成Document"></a>2.3 从本地文件生成Document</h6><p>　　关键方法： Jsoup.connect(File file,String charset)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void fromFile()&#123;</span><br><span class="line">        File file = new File(&quot;filePath&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            //通过文件+编码集来获取Document</span><br><span class="line">            Document document = Jsoup.parse(file,&quot;utf-8&quot;);</span><br><span class="line">            System.out.println(document.title());</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-获取Element及节点属性、文本、html"><a href="#3-获取Element及节点属性、文本、html" class="headerlink" title="3. 获取Element及节点属性、文本、html"></a>3. 获取Element及节点属性、文本、html</h4><p>　　在上一节中已经生成Document，下面就可以对这个document进行操作，操作的主要单位是Element，下面介绍如何选取elment及获取elment的内容。</p><h6 id="3-1-获取Element，获取的方式分为二种"><a href="#3-1-获取Element，获取的方式分为二种" class="headerlink" title="3.1 获取Element，获取的方式分为二种:"></a>3.1 获取Element，获取的方式分为二种:</h6><p>　　<code>a) 通过DOM解析来获取;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void extractDataByDOM() throws IOException&#123;</span><br><span class="line">    Document doc = Jsoup.connect(&quot;https://www.baidu.com/&quot;).get();</span><br><span class="line">    Element lg = doc.getElementById(&quot;lg&quot;);</span><br><span class="line">    logger.info(&quot;getElementById lg = &#123;&#125;&quot;, lg);</span><br><span class="line">    Elements links = doc.getElementsByTag(&quot;a&quot;);</span><br><span class="line">    for (Element link : links) &#123;</span><br><span class="line">      String linkHref = link.attr(&quot;href&quot;);</span><br><span class="line">      String linkText = link.text();</span><br><span class="line">      logger.info(&quot;linkHref=&#123;&#125;, linkText=&#123;&#125;&quot;,linkHref, linkText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　<code>b) 通过css或类似jquery的selector语法来获取；</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public void select4J() throws IOException&#123;</span><br><span class="line">    File input = new File(&quot;filePath&quot;);</span><br><span class="line">    Document document = Jsoup.parse(input, &quot;UTF-8&quot;, &quot;http://example.com/&quot;);</span><br><span class="line"></span><br><span class="line">    // 获取所有的a节点</span><br><span class="line">    Elements links = document.select(&quot;a[href]&quot;);</span><br><span class="line">    System.out.println(links);</span><br><span class="line">    // 获取img的src以.png结果结尾</span><br><span class="line">    Elements pngs = document.select(&quot;img[src$=.png]&quot;);</span><br><span class="line">    System.out.println(pngs);</span><br><span class="line">    // 获取class=masthead的div节点</span><br><span class="line">    Element masthead = document.select(&quot;div.masthead&quot;).first();</span><br><span class="line">    System.out.println(masthead);</span><br><span class="line"></span><br><span class="line">    // 获取class=r的h3节点下面的a节点</span><br><span class="line">    Elements resultLinks = document.select(&quot;h3.r &gt; a&quot;);</span><br><span class="line">    System.out.println(resultLinks);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="3-2-获取节点属性、文本、html"><a href="#3-2-获取节点属性、文本、html" class="headerlink" title="3.2 获取节点属性、文本、html"></a>3.2 获取节点属性、文本、html</h6><h6 id="3-3-Select选择器"><a href="#3-3-Select选择器" class="headerlink" title="3.3 Select选择器"></a>3.3 Select选择器</h6><h4 id="4-设置节点值"><a href="#4-设置节点值" class="headerlink" title="4. 设置节点值"></a>4. 设置节点值</h4><p>　　设置节点值，主要有在以下方式：<br>　　<code>a) 设置节点HTML的值</code><br>　　<code>b) 设置节点内容的值</code><br>　　<code>c) 设置节点属性的值</code></p><h6 id="4-1-设置节点HTML的值"><a href="#4-1-设置节点HTML的值" class="headerlink" title="4.1 设置节点HTML的值"></a>4.1 设置节点HTML的值</h6><p>　　1. Element.html：使用新的HTML替换旧的值<br>　　2. Element.prepend：将新html添加到指定节点内部的最前面<br>　　3. Element.append：将新html添加到指定节点内部的最后面<br>　　4. Element.wrap:将指定节点封装到html最里面</p><h6 id="4-2-设置节点内容的值"><a href="#4-2-设置节点内容的值" class="headerlink" title="4.2 设置节点内容的值"></a>4.2 设置节点内容的值</h6><p>　　1. Element.text: 完全替换内容<br>　　2. Element.prepend:在节点的内容最前面加内容<br>　　3. Element.append：在节点的内容最后面加内容</p><h6 id="4-3-设置节点属性的值"><a href="#4-3-设置节点属性的值" class="headerlink" title="4.3 设置节点属性的值"></a>4.3 设置节点属性的值</h6><p>　　1. element.attr: 设置属性<br>　　2. element.addClass: 设置class</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　对HTML页面的解析，之前我一般使用HTMLParser，详细见HTMLParser的学习系列 - 学习总结，但是这个项目已经停止更新。现在比较好的解析HTML的控件是Jsoup。本文对Jsoup的用法做个总结.&lt;br&gt;
    
    </summary>
    
    
      <category term="jsoup" scheme="http://yoursite.com/tags/jsoup/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/04/21/hello-world/"/>
    <id>http://yoursite.com/2018/04/21/hello-world/</id>
    <published>2018-04-21T05:54:00.000Z</published>
    <updated>2018-08-21T05:33:07.834Z</updated>
    
    <content type="html"><![CDATA[<p>　　Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -p 4000</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
