<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>117blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-06T08:56:02.363Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ChicWu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux基础;</title>
    <link href="http://yoursite.com/2018/09/06/Linux%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/Linux基础/</id>
    <published>2018-09-06T08:56:02.000Z</published>
    <updated>2018-09-06T08:56:02.363Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Filter基础;</title>
    <link href="http://yoursite.com/2018/09/06/Filter%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/Filter基础/</id>
    <published>2018-09-06T08:55:30.000Z</published>
    <updated>2018-09-06T08:55:30.845Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redis基础;</title>
    <link href="http://yoursite.com/2018/09/06/Redis%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/Redis基础/</id>
    <published>2018-09-06T08:54:55.000Z</published>
    <updated>2018-09-06T08:54:55.915Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Docker基础;</title>
    <link href="http://yoursite.com/2018/09/06/Docker%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/Docker基础/</id>
    <published>2018-09-06T08:54:28.000Z</published>
    <updated>2018-09-06T08:54:28.834Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MQ基础;</title>
    <link href="http://yoursite.com/2018/09/06/MQ%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/MQ基础/</id>
    <published>2018-09-06T08:54:20.000Z</published>
    <updated>2018-09-06T08:54:20.120Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hibernate进阶;</title>
    <link href="http://yoursite.com/2018/09/06/Hibernate%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2018/09/06/Hibernate进阶/</id>
    <published>2018-09-06T08:54:04.000Z</published>
    <updated>2018-09-06T08:54:04.037Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hibernate基础;</title>
    <link href="http://yoursite.com/2018/09/06/Hibernate%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/Hibernate基础/</id>
    <published>2018-09-06T08:53:46.000Z</published>
    <updated>2018-09-06T08:53:46.881Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MyBatis进阶;</title>
    <link href="http://yoursite.com/2018/09/06/MyBatis%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2018/09/06/MyBatis进阶/</id>
    <published>2018-09-06T08:53:12.000Z</published>
    <updated>2018-09-06T08:53:12.901Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MyBatis基础;</title>
    <link href="http://yoursite.com/2018/09/06/MyBatis%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/MyBatis基础/</id>
    <published>2018-09-06T08:52:55.000Z</published>
    <updated>2018-09-06T08:52:55.449Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>my;</title>
    <link href="http://yoursite.com/2018/09/06/my/"/>
    <id>http://yoursite.com/2018/09/06/my/</id>
    <published>2018-09-06T08:52:42.000Z</published>
    <updated>2018-09-06T08:52:42.427Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot的数据访问;</title>
    <link href="http://yoursite.com/2018/09/06/SpringBoot%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/"/>
    <id>http://yoursite.com/2018/09/06/SpringBoot的数据访问/</id>
    <published>2018-09-06T08:51:17.000Z</published>
    <updated>2018-09-06T08:51:17.341Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot的Web开发;</title>
    <link href="http://yoursite.com/2018/09/06/SpringBoot%E7%9A%84Web%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2018/09/06/SpringBoot的Web开发/</id>
    <published>2018-09-06T08:51:07.000Z</published>
    <updated>2018-09-06T08:51:07.090Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot核心;</title>
    <link href="http://yoursite.com/2018/09/06/SpringBoot%E6%A0%B8%E5%BF%83/"/>
    <id>http://yoursite.com/2018/09/06/SpringBoot核心/</id>
    <published>2018-09-06T08:50:33.000Z</published>
    <updated>2018-09-06T08:50:33.903Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot基础;</title>
    <link href="http://yoursite.com/2018/09/06/SpringBoot%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/SpringBoot基础/</id>
    <published>2018-09-06T08:50:21.000Z</published>
    <updated>2018-09-06T08:50:21.197Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC基础;</title>
    <link href="http://yoursite.com/2018/09/06/SpringMVC%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/SpringMVC基础/</id>
    <published>2018-09-06T08:50:03.000Z</published>
    <updated>2018-09-06T08:50:03.476Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring高级话题(二);</title>
    <link href="http://yoursite.com/2018/09/06/Spring%E9%AB%98%E7%BA%A7%E8%AF%9D%E9%A2%98/"/>
    <id>http://yoursite.com/2018/09/06/Spring高级话题/</id>
    <published>2018-09-06T08:49:21.000Z</published>
    <updated>2018-09-06T13:04:40.526Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p><h1 id="spring事务管理"><a href="#spring事务管理" class="headerlink" title="spring事务管理"></a>spring事务管理</h1><p>　　spring事务有四个优点：</p><ul><li>提供一致的对于不同的事务管理的API</li><li>支持声明式事务管理(重点)</li><li>编程事务管理(在开发中应用比较少)</li><li>优秀的整合与Spring的数据访问<h2 id="事务管理的API"><a href="#事务管理的API" class="headerlink" title="事务管理的API"></a>事务管理的API</h2><h3 id="事务的传播机制"><a href="#事务的传播机制" class="headerlink" title="事务的传播机制"></a>事务的传播机制</h3><h2 id="声明式事物"><a href="#声明式事物" class="headerlink" title="声明式事物"></a>声明式事物</h2><h3 id="开启声明式事务"><a href="#开启声明式事务" class="headerlink" title="开启声明式事务"></a>开启声明式事务</h3>spring开启声明式事务：<br>在application中<br>springBoot开启声明式事务：<br>，首先使用注解 <code>@EnableTransactionManagement</code>开启事务支持后，然后在访问数据库的Service方法上添加注解<code>@Transactional</code>便可。<h1 id="SpringAOP编程"><a href="#SpringAOP编程" class="headerlink" title="SpringAOP编程"></a>SpringAOP编程</h1><h1 id="Spring-jdbc-Template"><a href="#Spring-jdbc-Template" class="headerlink" title="Spring jdbc Template"></a>Spring jdbc Template</h1></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring常用配置(二);</title>
    <link href="http://yoursite.com/2018/09/06/Spring%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/09/06/Spring常用配置/</id>
    <published>2018-09-06T08:49:12.000Z</published>
    <updated>2018-09-06T08:49:12.805Z</updated>
    
    <content type="html"><![CDATA[<p>　　这家伙很懒竟然没写摘要<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这家伙很懒竟然没写摘要&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring基础;</title>
    <link href="http://yoursite.com/2018/09/06/Spring%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/06/Spring基础/</id>
    <published>2018-09-06T08:48:45.000Z</published>
    <updated>2018-09-06T12:31:04.315Z</updated>
    
    <content type="html"><![CDATA[<p>　　Spring框架是一个 轻量级的企业级开发的站式解决方案。 所谓解决方案就是可以基于Spring解决Java EE开发的所有问题。Spring框架主要提供了IoC 容器、AOP、数据访问、Web开发、消息、测试等相关技术的支持。<br>　　Spring使用简单的POJO (Plain Old Java Object,即无任何限制的普通Java对象)来进行企业级开发。每个被Spring管理的Java对象都称之为Bean;而Spring提供了一个IoC容器用来初始化对象，解决对象间的依赖管理和对象的使用。<br><a id="more"></a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>　　Spring框架是一个 轻量级的企业级开发的站式解决方案。 所谓解决方案就是可以基于Spring解决Java EE开发的所有问题。Spring框架主要提供了IoC 容器、AOP、数据访问、Web开发、消息、测试等相关技术的支持。<br>　　Spring使用简单的POJO (Plain Old Java Object,即无任何限制的普通Java对象)来进行企业级开发。每个被Spring管理的Java对象都称之为Bean;而Spring提供了一个IoC容器用来初始化对象，解决对象间的依赖管理和对象的使用。<br>　　Spring框架本身有四大基本原则：</p><ul><li><code>使用POJO进行轻量级和最小侵入式开发</code></li><li><code>通过依赖注入和基于接口编程实现松耦合</code></li><li><code>通过AOP和默认习惯进行声明式编程</code></li><li><code>使用AOP和模版减小模版式代码</code></li></ul><h2 id="Spring的模块"><a href="#Spring的模块" class="headerlink" title="Spring的模块"></a>Spring的模块</h2><p>　　spring是模块化的，这就意味着你可以只使用你需要的spring模块。spring的模块如下所示：<br><img src="/img/Spring模块.png" alt="Spring模块"></p><h3 id="核心容器"><a href="#核心容器" class="headerlink" title="核心容器"></a>核心容器</h3><ul><li>Sning-Core：核心工具类，Sping其他模块大最使用SingCcre;</li><li>Spring-Beans：Spring 定义Bean的支持;</li><li>Spring-Context：运行时Spring容器;</li><li>Spring-Context-Support：Spring容器对第三方包的集成支持;</li><li>Spring Expression：使用表达式语言在运行时查询和操作对象;</li></ul><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><ul><li>Spring-AOP：基于代理的AOP支持;</li><li>Spring-Aspects：基于AspeetU的AOP支持。</li></ul><h3 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h3><ul><li>Spring Messaging：对消息架构和协议的支持。</li></ul><h3 id="数据访问-集成"><a href="#数据访问-集成" class="headerlink" title="数据访问/集成"></a>数据访问/集成</h3><ul><li>Spring-Web：提供基础的Web集成的功能，在Web项目中提供Spring的容器;</li><li>Spring Webmve：提供基于Servlet的Spring MVC;</li><li>Spring WebSocket：提供WebSocket功能;</li><li>Spring Webmve Porlet：提供Portlet环境支持。</li></ul><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><ul><li>SpingJDBC：提供以IDBC访问数据库的支持;</li><li>Sping-TX：提供编程式和声明式的事务支持;</li><li>Spring-ORM:提供对对象关系映射技术的支持;</li><li>SpingOXM:提供对对象人xml映射技术的支持;Snig-M提供对IMS的支持。</li></ul><h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><p>　　spring进行配置的方式本有三种：配置文件方式，注解方式和java类方式，但是由于现在较为常用的是使用springBoot进行开发提倡零配置约定大于配置默认不在有web.xml等配置文件，所以不再考虑配置文件方式。</p><h2 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h2><h3 id="配置包扫描"><a href="#配置包扫描" class="headerlink" title="配置包扫描"></a>配置包扫描</h3><h3 id="Bean的实例化方法"><a href="#Bean的实例化方法" class="headerlink" title="Bean的实例化方法"></a>Bean的实例化方法</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><h4 id="声明周期"><a href="#声明周期" class="headerlink" title="声明周期"></a>声明周期</h4><h3 id="Bean的属性注入"><a href="#Bean的属性注入" class="headerlink" title="Bean的属性注入"></a>Bean的属性注入</h3><h4 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h4><h4 id="Setter方法注入"><a href="#Setter方法注入" class="headerlink" title="Setter方法注入"></a>Setter方法注入</h4><h4 id="集合属性注入"><a href="#集合属性注入" class="headerlink" title="集合属性注入"></a>集合属性注入</h4><h2 id="java类方式"><a href="#java类方式" class="headerlink" title="java类方式"></a>java类方式</h2><h1 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><p>　　我们经常说的控制翻转(Inversion of Control-I0C)和依赖注入(dependency injecton-D)在Spring环境下是等同的概念，控制翻转是通过依赖注入实现的。所谓依赖注入指的是容基负责创建对象和维护对象的依赖关系，而不是通过对象本身负责自己的创建和解决自己的依赖。<br>　　依赖注入的主要目的是为了解耦，体现了种“组合”的理念。如果你希望你的类具各某项功能的时候，是继承自一个具有此功能的父类好呢?还是组合另外一个具有这个功能的类好呢?答案是不言而喻的，继承一个父类，子类将与父类耦合，组合另外一个类则使耦合度大大降低。<br>　　Spring IoC容器(ApplicationContext)负责创建Bcan，并通过容器将功能类Bean注入到你需要的Bean中。Spring 提供使用xml、注解、Java 配置、groovy 配置实现Bean的创建和注入。<br>　　<code>声明Bean的注解:</code></p><ul><li>@Component组件，没有明确的角色,</li><li>@Service在业务逻辑层( service层)使用,</li><li>@Repository在数据访问层(dao层)使用,</li><li>@Conroller在展现层(MVC- Spring MVC)使用,</li></ul><p>　　<code>注入Bean的注解,一般情况下通用</code></p><ul><li>@Autowired: Spring 提供的注解,</li><li>@Inject: JSR-330提供的注解,</li><li>@Resource: JSR 250提供的注解,</li></ul><p>　　@Autowired. @Inject. @Resurce可注解在se方法上或者属性上，建议注解在属性上，优点是代码更少、层次更清晰。</p><h1 id="AOP-1"><a href="#AOP-1" class="headerlink" title="AOP"></a>AOP</h1><p>　　AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。<br>　　AOP是一个概念，并没有设定具体语言的实现，它能克服那些只有单继承特性语言的缺点，spring2.0之后整合AspectJ第三方AOP技术。AspectJ是一个面向切面的框架，它扩展了Java语言。AspectJ定义了AOP语法所以它有一个专门的编译器用来生成遵守Java字节编码规范的Class文件。</p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><p>　　日志记录，性能统计，安全控制，事务处理，异常处理等等</p><h2 id="主要意图"><a href="#主要意图" class="headerlink" title="主要意图"></a>主要意图</h2><p>　　将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。</p><h2 id="AOP底层实现"><a href="#AOP底层实现" class="headerlink" title="AOP底层实现"></a>AOP底层实现</h2><p>　　AOP分为静态AOP和动态AOP。静态AOP是指AspectJ实现的AOP，他是将切面代码直接编译到Java类文件中。动态AOP是指将切面代码进行动态织入实现的AOP。Spring的AOP为动态AOP，实现的技术为： JDK提供的动态代理技术 和 CGLIB(动态字节码增强技术)。</p><h3 id="JDK动态代理和CGLIB动态代理"><a href="#JDK动态代理和CGLIB动态代理" class="headerlink" title="JDK动态代理和CGLIB动态代理"></a>JDK动态代理和CGLIB动态代理</h3><ul><li>jdk的动态代理只可以为接口去完成操作，而cglib它可以为没有实现接口的类去做代理，也可以为实现接口的类去做代理。</li><li>如果目标对象，有接口，优先使用jdk动态代理；如果目标对象，无接口，使用cglib动态代理。</li></ul><h2 id="AOP开发"><a href="#AOP开发" class="headerlink" title="AOP开发"></a>AOP开发</h2><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h3 id="IOC和DI区别"><a href="#IOC和DI区别" class="headerlink" title="IOC和DI区别?"></a>IOC和DI区别?</h3><p>　　IOC 控制反转，是指对象实例化权利由spring容器来管理<br>　　DI 依赖注入 在spring创建对象的过程中，对象所依赖的属性通过配置注入对象中，在Spring环境下是等同的概念。</p><h3 id="ApplicationContext与BeanFactory关系"><a href="#ApplicationContext与BeanFactory关系" class="headerlink" title="ApplicationContext与BeanFactory关系"></a>ApplicationContext与BeanFactory关系</h3><p><img src="/img/ApplicationContext与BeanFactory关系.png" alt=""><br>　　ApplicationContext它是扩展BeanFactory接口。BeanFactory它采取延迟加载的方案，只有真正在getBean时才会实例化Bean,在开发中我们一般使用的是ApplicationContext,真正使用的是其实现类AppliCationContext它会在配置文件加载时，就会初始化Bean,并且ApplicationContext它提供不同的应用层的Context实现。例如在web开发中可以使用WebApplicationContext<br>　　<code>FileSystemXmlAppliCationContext 根据文件路径获取</code><br>　　<code>ClassPathXmlApplicationContext  根据类路径获取</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　Spring框架是一个 轻量级的企业级开发的站式解决方案。 所谓解决方案就是可以基于Spring解决Java EE开发的所有问题。Spring框架主要提供了IoC 容器、AOP、数据访问、Web开发、消息、测试等相关技术的支持。&lt;br&gt;　　Spring使用简单的POJO (Plain Old Java Object,即无任何限制的普通Java对象)来进行企业级开发。每个被Spring管理的Java对象都称之为Bean;而Spring提供了一个IoC容器用来初始化对象，解决对象间的依赖管理和对象的使用。&lt;br&gt;
    
    </summary>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Logger 基本用法</title>
    <link href="http://yoursite.com/2018/09/04/%E4%BD%BF%E7%94%A8Logger%E8%BF%9B%E8%A1%8C%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2018/09/04/使用Logger进行日志处理/</id>
    <published>2018-09-04T12:04:54.000Z</published>
    <updated>2018-09-04T12:55:45.561Z</updated>
    
    <content type="html"><![CDATA[<p>　　简单的使用Logger进行日志处理<br><a id="more"></a></p><h1 id="一、创建Logger对象"><a href="#一、创建Logger对象" class="headerlink" title="一、创建Logger对象"></a>一、创建Logger对象</h1><p><code>static Logger getLogger(String name)</code><br>　　为指定子系统查找或创建一个 logger。<br><code>static Logger getLogger(String name, String resourceBundleName)</code><br>　　为指定子系统查找或创建一个 logger。<br>注意：name是Logger的名称，当名称相同时候，同一个名称的Logger只创建一个。</p><h1 id="二、Logger的级别"><a href="#二、Logger的级别" class="headerlink" title="二、Logger的级别"></a>二、Logger的级别</h1><p>　　比log4j的级别详细，全部定义在java.util.logging.Level里面。各级别按降序排列如下：</p><blockquote><ul><li>SEVERE（最高值）</li><li>WARNING</li><li>INFO(默认)</li><li>CONFIG</li><li>FINE</li><li>FINER</li><li>FINEST（最低值）</li></ul></blockquote><p>　　此外，还有一个级别 OFF，可用来关闭日志记录，使用级别 ALL 启用所有消息的日志记录。<br>logger默认的级别是INFO，比INFO更低的日志将不显示。</p><h1 id="三、Logger的Handler"><a href="#三、Logger的Handler" class="headerlink" title="三、Logger的Handler"></a>三、Logger的Handler</h1><p>　　创建方法:<br>　　<code>FileHandler fileHandler = new FileHandler(FILE_PATH, true);</code><br>　　<code>FILE_PATH:日志文件的路径，true：是否才用追加的方式写入日志文件</code><br>　　Handler 对象从 Logger 中获取日志信息，并将这些信息导出。例如，它可将这些信息写入控制台或文件中，也可以将这些信息发送到网络日志服务中，或将其转发到操作系统日志中。<br>　　可通过执行 setLevel(Level.OFF) 来禁用 Handler，并可通过执行适当级别的 setLevel 来重新启用。<br>　　Handler 类通常使用 LogManager 属性来设置 Handler 的 Filter、Formatter 和 Level 的默认值</p><h1 id="四、Logger的Formatter"><a href="#四、Logger的Formatter" class="headerlink" title="四、Logger的Formatter"></a>四、Logger的Formatter</h1><p>　　Formatter 为格式化 LogRecords 提供支持。<br>　　一般来说，每个日志记录 Handler 都有关联的 Formatter。Formatter 接受 LogRecord，并将它转换为一个字符串。<br>　　有些 formatter（如 XMLFormatter）需要围绕一组格式化记录来包装头部和尾部字符串。可以使用 getHeader 和 getTail 方法来获得这些字符串。<br>　　LogRecord 对象用于在日志框架和单个日志 Handler 之间传递日志请求。<br>　　<code>LogRecord(Level level, String msg)</code><br>　　Level用给定级别和消息值构造 LogRecord。</p><h1 id="五、简单案例"><a href="#五、简单案例" class="headerlink" title="五、简单案例"></a>五、简单案例</h1><p>　　日志处理类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class MyLog &#123;</span><br><span class="line">    private static Logger logger = Logger.getLogger(MyLog.class.getName());</span><br><span class="line"></span><br><span class="line">    private static String FILE_PATH = &quot;E:\\MyLog\\winfo.log&quot;;</span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            FileHandler fileHandler = new FileHandler(FILE_PATH, true);</span><br><span class="line">            fileHandler.setEncoding(&quot;utf-8&quot;);</span><br><span class="line">            MyLogFormatter sf = new MyLogFormatter();</span><br><span class="line">            fileHandler.setFormatter(sf);</span><br><span class="line">            logger.addHandler(fileHandler);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void error(Object obj) &#123;</span><br><span class="line">        //严重</span><br><span class="line">        LogRecord lr = new LogRecord(Level.SEVERE, obj.toString());</span><br><span class="line">        logger.log(lr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void warn(Object obj) &#123;</span><br><span class="line">        //警告</span><br><span class="line">        LogRecord lr = new LogRecord(Level.WARNING, obj.toString());</span><br><span class="line">        logger.log(lr);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void info(Object obj) &#123;</span><br><span class="line">        //信息</span><br><span class="line">        LogRecord lr = new LogRecord(Level.INFO, obj.toString());</span><br><span class="line">        logger.log(lr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　日志信息处理类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class OTLLogFormatter extends Formatter &#123;</span><br><span class="line">    SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy/MM/dd HH:mm:ss&quot;);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String format(LogRecord record) &#123;</span><br><span class="line">        return &quot;[&quot; + sdf.format(new Date()) + &quot;] [&quot; + record.getLevel() + &quot;] &quot;</span><br><span class="line">                + record.getMessage().replace(&quot;\r&quot;, &quot; &quot;).replace(&quot;\n&quot;, &quot; &quot;) + &quot;\r\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　测试案例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class LogTest &#123;</span><br><span class="line">       @Test</span><br><span class="line">       public void test0()&#123;</span><br><span class="line">           OTLLog.error(&quot;严重信息测试&quot;);</span><br><span class="line">       OTLLog.warn(&quot;警告信息测试&quot;);</span><br><span class="line">       OTLLog.info(&quot;信息输出测试&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　简单的使用Logger进行日志处理&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>babel(一)js代码转换</title>
    <link href="http://yoursite.com/2018/08/30/Babel(%E4%B8%80)Js%E4%BB%A3%E7%A0%81%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2018/08/30/Babel(一)Js代码转换/</id>
    <published>2018-08-30T11:17:50.000Z</published>
    <updated>2018-09-06T08:47:22.402Z</updated>
    
    <content type="html"><![CDATA[<p>　　近期get一个需求：需要对原始的js代码转换功能进行改进，在原始的通过正则匹配转换前增加一层更加准确的ast(抽象解析树)转换。初期的想法是使用jdk9，acorn和babel都进行测试然后选择最优。然后通过实践后发现jdk9只能做到对js的ast解析无法对ast进行更改以及ast转换为js操作，acorn与babel两者都是基于node.js的模块都可以实现js的转换功能但是相比而言acorn的相关文献太少且不完整，另一方面acorn主要是侧重于对js代码的解析在进行js转换的过程中发现有很多的坑步履艰难，而babel则不一样在js的解析方面是基于acorn有着与acorn几乎相同的解析速度，并且在转换方面有着一套完整的开发体系以及有着一套支持多国语言的<a href="https://github.com/jamiebuilds/babel-handbook/blob/master/README.md" target="_blank" rel="noopener">开发文档</a>学习的效率远高于acorn。<br><a id="more"></a></p><h2 id="一，简介"><a href="#一，简介" class="headerlink" title="一，简介"></a>一，简介</h2><h3 id="1-1-ast-抽象语法树"><a href="#1-1-ast-抽象语法树" class="headerlink" title="1.1 ast(抽象语法树):"></a>1.1 ast(抽象语法树):</h3><p>　　抽象语法树（abstract syntax tree或者缩写为AST），或者语法树（syntax tree），是源代码的抽象语法结构的树状表现形式，这里特指编程语言的源代码。和抽象语法树相对的是具体语法树（concrete syntaxtree），通常称作分析树（parse tree）。一般的，在源代码的翻译和编译过程中，语法分析器创建出分析树。一旦AST被创建出来，在后续的处理过程中，比如语义分析阶段，会添加一些信息。<br>　　通过AST可以对源代码进行更为准确的定位以及更换，并且有着正则无法实现的上下文结合，可以对源码进行手术刀级别的修改。<br>　　推荐两个在线生成AST工具：<a href="https://astexplorer.net/" target="_blank" rel="noopener">Astexplorer</a>，<a href="http://esprima.org/demo/parse.html#" target="_blank" rel="noopener">Esprima</a></p><h3 id="1-2-nodejs"><a href="#1-2-nodejs" class="headerlink" title="1.2 nodejs:"></a>1.2 nodejs:</h3><p>　　Nodejs框架是基于V8的引擎，是目前速度最快的Javascript引擎。chrome浏览器就基于V8，同时打开20-30个网页都很流畅。Nodejs标准的web开发框架Express，可以帮助我们迅速建立web站点，比起PHP的开发效率更高，而且学习曲线更低。<br>　　JS是脚本语言，脚本语言需要一个解析器才能运行。对于写在HTML页面里面的JS，浏览器充当了解析器的角色。而对于需要独立运行的JS，NodeJS就是一个解析器可以通过命令直接运行js。<br>　　每种解析器就是一个运行环境，不但允许JS定义各种数据结构，进行各种计算，还允许JS使用运行环境提供的内置对象和方法做一些事情。例如运行在浏览器中的JS的用途是操作DOM，浏览器就提供了document之类的内置对象。而运行在NodeJS中的JS的用途是操作磁盘文件或者搭建HTTP服务器，NodeJS就相应提供了fs、http等内置对象。<br>　　另外Node.js生态圈也是非常的强大有则很多有些的第三法模块比如本次使用的babel,acorn，Bloger的福音Hexo等</p><h3 id="1-3-babel："><a href="#1-3-babel：" class="headerlink" title="1.3 babel："></a>1.3 babel：</h3><p>　　Babel 是一个通用的多用途 JavaScript 编译器。通过 Babel 你可以使用（并创建）下一代的 JavaScript，以及下一代的 JavaScript 工具。作为一种语言，JavaScript 在不断发展，新的标准／提案和新的特性层出不穷。 在得到广泛普及之前，Babel 能够让你提前（甚至数年）使用它们。 Babel 把用最新标准编写的 JavaScript 代码向下编译成可以在今天随处可用的版本。 这一过程叫做“源码到源码”编译， 也被称为转换编译（transpiling，是一个自造合成词，即转换＋编译。以下也简称为转译）。 例如，Babel 能够将新的 ES2015 箭头函数语法：<br>　　`const square = n =&gt; n * n;<br>　　转译为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const square = function square(n) &#123;</span><br><span class="line">    return n * n;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p><p>　　不过 Babel 的用途并不止于此，它支持语法扩展，能支持像 React 所用的 JSX 语法，同时还支持用于静态类型检查的流式语法（Flow Syntax）。更重要的是，Babel 的一切都是简单的插件，谁都可以创建自己的插件，利用 Babel 的全部威力去做任何事情。再进一步，Babel 自身被分解成了数个核心模块，任何人都可以利用它们来创建下一代的 JavaScript 工具。已经有很多人都这样做了，围绕着 Babel 涌现出了非常大规模和多样化的生态系统。<br>　　以上描述来自Babel官方github，也就是说Babel可以进行js代码的转换并且拥有这丰富的插件来按照指定规则来转换，最重要的还可以通过自定义插件。(本次主要使用babel的基本语法，插件的编写在后期博客中讲解)</p><h2 id="二，安装教程"><a href="#二，安装教程" class="headerlink" title="二，安装教程"></a>二，安装教程</h2><h3 id="2-1-nodejs"><a href="#2-1-nodejs" class="headerlink" title="2.1 nodejs:"></a>2.1 nodejs:</h3><p>　　从<a href="">官网</a>上点击对应的版本下载安装包，然后无脑下一步进行安装。<br>　　配置环境变量将node.js的安装路径添加到Path当中(为了能够在windos中全局调用node.js命令)<br>　　现在就可以通过<code>node xxx.js</code>执行js文件了</p><h3 id="2-2-babel"><a href="#2-2-babel" class="headerlink" title="2.2 babel:"></a>2.2 babel:</h3><p>　　<code>babel-cli</code><br>　　Babel 的 CLI 是一种在命令行下使用 Babel 编译文件的简单方法。其安装的方法有两种：全局安装和在项目中安装，官方推荐的是在项目中安装，个人也比较认同这一点。<br>　　首先建立一个文件夹比如<code>babel</code>可以在node.js安装目录下也可以在其他目录下，建议不在node.js安装目录下，创建后在打开cmd窗口并进入该目录进行下一步操作。</p><h5 id="a）全局安装"><a href="#a）全局安装" class="headerlink" title="a）全局安装"></a>a）全局安装</h5><p>　　通过命令<code>$ npm install --global babel-cli</code>在babel-cli安装完后就可以通过执行<code>$ babel SimpleTest.js</code>来执行我们的第一个文件。不过这只是简单的将js结果输出到控制台<br>　　使用<code>$ babel example.js --out-file compiled.js</code>或者<code>$ babel example.js -o compiled.js</code>可以将结果写入到指定的文件。<br>　　如果我们想要把一个目录整个编译成一个新的目录，可以使用 –out-dir 或者 -d<code>$ babel src --out-dir lib</code> <code>$ babel src -d lib</code><br>　　如果想要卸载全局安装的babel的话可以通过执行<code>$ npm uninstall --global babel-cli</code></p><h5 id="b-在项目中安装"><a href="#b-在项目中安装" class="headerlink" title="b) 在项目中安装"></a>b) 在项目中安装</h5><p>　　通过命令<code>$ npm install --save-dev babel-cli</code>完成安装后你的<code>package.json</code>应该如下所示：<br><figure class="highlight plain"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">json&#123;</span><br><span class="line">  &quot;name&quot;: &quot;my-project&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;babel-cli&quot;: &quot;^6.0.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　如果我们不想直接从命令行运行 Babel 了，取而代之我们将把运行命令写在 npm scripts 里，这样可以使用 Babel 的本地版本。只需将 <code>scripts</code> 字段添加到你的 <code>package.json</code> 文件内并且把 babel 命令写成 build 字段。.<br><figure class="highlight plain"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot;: &quot;my-project&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">+   &quot;scripts&quot;: &#123;</span><br><span class="line">+     &quot;build&quot;: &quot;babel src -d lib&quot;</span><br><span class="line">+   &#125;,</span><br><span class="line">    &quot;devDependencies&quot;: &#123;</span><br><span class="line">      &quot;babel-cli&quot;: &quot;^6.0.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>然后在终端里运行：<code>npm run build</code>就可以了</p><h2 id="三，-进行js代码转换"><a href="#三，-进行js代码转换" class="headerlink" title="三， 进行js代码转换"></a>三， 进行js代码转换</h2><h3 id="3-1-babel的解析引擎"><a href="#3-1-babel的解析引擎" class="headerlink" title="3.1 babel的解析引擎"></a>3.1 babel的解析引擎</h3><p>　　Babel使用的引擎是babylon，babylon并非由babel团队自己开发的，而是fork的acorn项目，不过acorn引擎只提供基本的解析ast的能力。<br>　　遍历还需要配套的babel-travesal, 替换节点需要使用babel-types，而这些开发，在Babel的插件体系开发下，变得一体化了。</p><h3 id="3-2-使用babel做js的代码转换"><a href="#3-2-使用babel做js的代码转换" class="headerlink" title="3.2 使用babel做js的代码转换"></a>3.2 使用babel做js的代码转换</h3><p>　　进行js代码的转换主要分为三个步骤：js代码解析为AST树，对AST树进行遍历修改，将修改后的AST树转换为新的js代码。</p><h4 id="a-js代码解析为AST树"><a href="#a-js代码解析为AST树" class="headerlink" title="a) js代码解析为AST树"></a>a) js代码解析为AST树</h4><p>　　<a href="https://github.com/babel/babylon" target="_blank" rel="noopener"><code>babylon</code></a>&lt;–点一下，打来惊喜<br>　　将js源码转换为AST用到的模块叫：babylon，Babylon 是 Babel 的解析器。最初是 从Acorn项目fork出来的。Acorn非常快，易于使用，并且针对非标准特性(以及那些未来的标准特性) 设计了一个基于插件的架构。<br>　　运行以下命令进行安装：<br>　　<code>$ npm install --save babylon</code><br>　　使用的方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const babylon = require(&apos;babylon&apos;);</span><br><span class="line"></span><br><span class="line">const code = `function square(n) &#123;</span><br><span class="line">  return n * n;</span><br><span class="line">&#125;`;  </span><br><span class="line">console.log(babylon.parse(code));</span><br></pre></td></tr></table></figure></p><p>　　也可以通过如下的方法传递选项给parse()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">babylon.parse(code, &#123;</span><br><span class="line">  sourceType: &quot;module&quot;, // default: &quot;script&quot;</span><br><span class="line">  plugins: [&quot;jsx&quot;] // default: []</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>　　sourceType 可以是 “module” 或者 “script”，它表示 Babylon 应该用哪种模式来解析。 “module” 将会在严格模式下解析并且允许模块定义，”script” 则不会。<br>　　由于 Babylon 使用了基于插件的架构，因此有一个 plugins 选项可以开关内置的插件。 注意 Babylon 尚未对外部插件开放此 API 接口，不排除未来会开放此API。<br>　　要查看完整的插件列表，请点击这个<a href="https://github.com/babel/babylon/blob/master/README.md#plugins" target="_blank" rel="noopener">链接</a></p><h4 id="b-对AST树进行遍历修改"><a href="#b-对AST树进行遍历修改" class="headerlink" title="b) 对AST树进行遍历修改"></a>b) 对AST树进行遍历修改</h4><p>　　<a href="https://github.com/babel/babel/tree/master/packages/babel-traverse" target="_blank" rel="noopener"><code>babel-traverse</code></a>&lt;–点一下，打开惊喜<br>　　Babel Traverse模块维护了整棵树的状态，并且负责替换、移除和添加节点。<br>　　运行以下命令安装：<br>　　<code>$ npm install --save babel-traverse</code></p><h4 id="c-将修改后的AST树转换为新的js代码"><a href="#c-将修改后的AST树转换为新的js代码" class="headerlink" title="c) 将修改后的AST树转换为新的js代码"></a>c) 将修改后的AST树转换为新的js代码</h4><p>　　<a href="https://github.com/babel/babel/tree/master/packages/babel-generator" target="_blank" rel="noopener"><code>babel-generator</code></a>&lt;–点一下,打开惊喜<br>　　Babel Generator模块是 Babel 的代码生成器，它读取AST并将其转换为代码和源码映射。<br>　　<code>$ npm install --save babel-generator</code></p><h4 id="d-案例代码"><a href="#d-案例代码" class="headerlink" title="d) 案例代码"></a>d) 案例代码</h4><figure class="highlight plain"><figcaption><span>SimpleTest.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//引入fs模块</span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">//引入babel模快</span><br><span class="line">const babylon = require(&apos;babylon&apos;);</span><br><span class="line">const Traverse = require(&apos;babel-traverse&apos;).default;</span><br><span class="line">const generator = require(&apos;babel-generator&apos;).default;</span><br><span class="line">//读取js文件</span><br><span class="line">var code =fs.readFileSync(&apos;./JsFile0.js&apos;, &apos;utf8&apos;);</span><br><span class="line">//修改js</span><br><span class="line">var paths = &quot;&quot;;</span><br><span class="line">var ast = babylon.parse(code);</span><br><span class="line">Traverse(ast, &#123;</span><br><span class="line">  enter(path) &#123;</span><br><span class="line">    if (</span><br><span class="line">      path.node.type === &quot;Identifier&quot; &amp;&amp;</span><br><span class="line">      path.node.name === &quot;n&quot;</span><br><span class="line">    ) &#123;</span><br><span class="line">      path.node.name = &quot;x&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">//写入生成新的js并写入文件</span><br><span class="line">fs.writeFile(&apos;./JsFile0.js&apos;,generator(ast).code,function(err)&#123;</span><br><span class="line">    if(err) console.log(&apos;写文件操作失败&apos;);</span><br><span class="line">    else console.log(&apos;写文件操作成功&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>JsFile0.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a === n;</span><br></pre></td></tr></table></figure><ul><li>1 如果运行成功的话会在终端中输出<code>写文件操作成功</code>且JsFile0.js中的n会替换成x。</li><li>2 对于node.js当中的模块引入有两种方式<code>import</code>和<code>require</code>两种用法自行百度，我在这里说一下我用的是第二种方法因为import对于nodejs7.0以及之前的版本并不能识别。</li></ul><h3 id="3-3-通过java执行node-js"><a href="#3-3-通过java执行node-js" class="headerlink" title="3.3 通过java执行node.js"></a>3.3 通过java执行node.js</h3><p>　　通过java代码直接执行cmd命令–&gt;通过cmd来调用node.js执行js代码，原js打印到终端的信息会打印到控制台<br>　　注意事项：<br>　　　　1，java代码执行的cmd命令为项目的根目录 “/”为cmd中的下一级目录<br>　　　　2，如果执行的js文件用有引用到其他的文件相对路径是相对的cmd执行路径所以最好写成绝对路径如：“C:\a\b.js”<br>　　　　3，请耐心往下接着看，代码并非可以直接运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">public void nodeRunJ() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String line = null;</span><br><span class="line">            String command = &quot;node ./AstForBabel/SimpleTest.js&quot;;</span><br><span class="line">            Process p = Runtime.getRuntime().exec(command);</span><br><span class="line">            BufferedReader stdout = new BufferedReader(new InputStreamReader(</span><br><span class="line">                    p.getInputStream()));</span><br><span class="line">            while ((line = stdout.readLine()) != null) &#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">            stdout.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>由于编写的js代码用有用到babel模块中的一些函数，所以代码并非可以直接运行需要现在你的java工程中将之前安装的babel模块同样的安装在项目当中。</li><li>其实通过测试也可以不用重新安装可以将之前的<code>babel</code>目录下的文件直接粘贴到工程当中就可以。如果想要确定是否好使，稳妥起见最好现在项目的目录下打开终端运行一下node命令看是否可以运行</li></ul><h2 id="四，-FAQ"><a href="#四，-FAQ" class="headerlink" title="四， FAQ"></a>四， FAQ</h2><h3 id="在安装过程中出现错误，无法找到package-json"><a href="#在安装过程中出现错误，无法找到package-json" class="headerlink" title="* 在安装过程中出现错误，无法找到package.json"></a>* 在安装过程中出现错误，无法找到<code>package.json</code></h3><p>　　可以先执行<code>$ npm init</code>命令然后按照提示回车,回车完成安装生成一个初始化的环境，然后再执行babel的安装</p><h3 id="bbb"><a href="#bbb" class="headerlink" title="* bbb"></a>* bbb</h3><h3 id="ccc"><a href="#ccc" class="headerlink" title="* ccc"></a>* ccc</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　近期get一个需求：需要对原始的js代码转换功能进行改进，在原始的通过正则匹配转换前增加一层更加准确的ast(抽象解析树)转换。初期的想法是使用jdk9，acorn和babel都进行测试然后选择最优。然后通过实践后发现jdk9只能做到对js的ast解析无法对ast进行更改以及ast转换为js操作，acorn与babel两者都是基于node.js的模块都可以实现js的转换功能但是相比而言acorn的相关文献太少且不完整，另一方面acorn主要是侧重于对js代码的解析在进行js转换的过程中发现有很多的坑步履艰难，而babel则不一样在js的解析方面是基于acorn有着与acorn几乎相同的解析速度，并且在转换方面有着一套完整的开发体系以及有着一套支持多国语言的&lt;a href=&quot;https://github.com/jamiebuilds/babel-handbook/blob/master/README.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开发文档&lt;/a&gt;学习的效率远高于acorn。&lt;br&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
</feed>
